{
  "address": "0x53B6085C0c2f48FC3fa45D11C913Fd3B52FC70f2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IImplementationManager",
          "name": "_implementationManager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "vrfCoordinator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "keyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "requestConfirmations",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            }
          ],
          "internalType": "struct RandomProvider.ChainlinkVRFData",
          "name": "_data",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NOT_RAFFLE_CONTRACT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COORDINATOR",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkVRFData",
      "outputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationManager",
      "outputs": [
        {
          "internalType": "contract IImplementationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4268099d942ba141cec167302803e4e9dd9304e80ad27e2d5b4170ba3acd297a",
  "receipt": {
    "to": null,
    "from": "0x94e1EBc6464Ff4c0043fF4dD2b8941c655681C44",
    "contractAddress": "0x53B6085C0c2f48FC3fa45D11C913Fd3B52FC70f2",
    "transactionIndex": 11,
    "gasUsed": "484623",
    "logsBloom": "0x
    "blockHash": "0x6d3498ed865dadbe72bec1130b7ad8a1cb5ab0c3526b4ef811347143a5395930",
    "transactionHash": "0x4268099d942ba141cec167302803e4e9dd9304e80ad27e2d5b4170ba3acd297a",
    "logs": [],
    "blockNumber": 8440285,
    "cumulativeGasUsed": "8863323",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x157d5673250BfD323Bdc6161C6dF767b8E6cC567",
    [
      "0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d",
      "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
      100000,
      3,
      9479
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "671686af582f4bcec18e1d45c91d6278",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IImplementationManager\",\"name\":\"_implementationManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"internalType\":\"struct RandomProvider.ChainlinkVRFData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NOT_RAFFLE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkVRFData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationManager\",\"outputs\":[{\"internalType\":\"contract IImplementationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"requestRandomNumber()\":{\"notice\":\"Request a random numbers using ChainLinkVRFv2\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/RandomProvider.sol\":\"RandomProvider\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735363234393633383730\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"lib/chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"src/core/RandomProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {VRFCoordinatorV2Interface } from \\\"lib/chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"lib/chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport {IImplementationManager} from \\\"../interfaces/IImplementationManager.sol\\\";\\nimport {IAccessController} from \\\"../interfaces/IAccessController.sol\\\";\\nimport {IRandomProvider} from \\\"../interfaces/IRandomProvider.sol\\\";\\nimport {IRaffle} from \\\"../interfaces/IRaffle.sol\\\";\\n\\nimport {ImplementationInterfaceNames} from \\\"../libraries/helpers/ImplementationInterfaceNames.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\ncontract RandomProvider is VRFConsumerBaseV2, IRandomProvider {\\n\\n    struct ChainlinkVRFData {\\n        // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n        address vrfCoordinator;\\n        // The gas lane to use, which specifies the maximum gas price to bump to.\\n        // For a list of available gas lanes on each network,\\n        // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n        bytes32 keyHash;\\n        // A reasonable default is 100000, but this value could be different\\n        // on other networks.\\n        uint32 callbackGasLimit;\\n        // The default is 3, but you can set this higher.\\n        uint16 requestConfirmations;\\n        \\n        uint64 subscriptionId;\\n    }\\n    \\n    //----------------------------------------\\n    // Storage\\n    //----------------------------------------\\n\\n    VRFCoordinatorV2Interface public COORDINATOR;\\n    \\n    IImplementationManager public implementationManager;\\n\\n    ChainlinkVRFData public chainlinkVRFData;\\n\\n    mapping(uint256 => address) public requestIdToAddress;\\n\\n    //----------------------------------------\\n    // Modifier\\n    //----------------------------------------\\n\\n    modifier onlyMaintainer() {\\n        IAccessController accessController = IAccessController(implementationManager.getImplementationAddress(ImplementationInterfaceNames.AccessController));\\n        if(!accessController.hasRole(accessController.MAINTAINER_ROLE(), msg.sender)) revert Errors.NOT_MAINTAINER();\\n        _;\\n    } \\n\\n    modifier onlyRaffleContract(){\\n        if(implementationManager.getImplementationAddress(ImplementationInterfaceNames.RaffleContract) != msg.sender) revert Errors.NOT_RAFFLE_CONTRACT();\\n        _;\\n    }\\n\\n   constructor(\\n        IImplementationManager _implementationManager,\\n        ChainlinkVRFData memory _data\\n    )\\n        VRFConsumerBaseV2(_data.vrfCoordinator)\\n    {\\n        implementationManager = _implementationManager;\\n        COORDINATOR = VRFCoordinatorV2Interface(\\n            _data.vrfCoordinator\\n        );\\n        chainlinkVRFData = _data;\\n    }\\n\\n    function requestRandomNumber() external override onlyRaffleContract() {\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            chainlinkVRFData.keyHash,\\n            chainlinkVRFData.subscriptionId,\\n            chainlinkVRFData.requestConfirmations,\\n            chainlinkVRFData.callbackGasLimit,\\n            1\\n        );\\n        requestIdToAddress[requestId] = msg.sender;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        IRaffle(requestIdToAddress[requestId]).drawnTicket(randomWords[0]); \\n    }\\n}\",\"keccak256\":\"0xa8dc6a1b9f9826ff5d7095a8e39bcf5b6272c7cc15b287d5cd849cd3d8d82d2a\",\"license\":\"MIT\"},\"src/interfaces/IAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IAccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessController is IAccessControl {\\n  function MAINTAINER_ROLE() external view returns (bytes32);\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n}\",\"keccak256\":\"0xd0b3c763ebdc8a64694959d9b799e401b1b791d1f6a4edb62764900a22b570c3\",\"license\":\"MIT\"},\"src/interfaces/IImplementationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IImplementationManager{\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(\\n        bytes32 interfaceName,\\n        address implementationAddress\\n    ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address implementationAddress);\\n\\n}\",\"keccak256\":\"0x77bef3e7ed09382acfe4011fdc7371857e6bd0b44b83c1534380cd5b9b29702e\",\"license\":\"MIT\"},\"src/interfaces/IRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRaffle {\\n\\n    /**\\n     * @notice Allows users to purchase tickets\\n     * @dev Only accessible if raffle still open to particpants\\n     * @param nbOfTickets number of tickets purchased\\n     */\\n    function purchaseTickets(uint256 nbOfTickets) external;\\n\\n    /**\\n     * @notice Allows the winner to claim his price\\n     * @dev Ticket number must be draw and raffle close to new participants\\n     */\\n    function claimPrice() external;\\n    \\n    /**\\n     * @notice Allows the creator to claim the amount related to the ticket sales\\n     * @dev The functions should send to the creator his part after fees\\n     */\\n    function claimTicketSalesAmount() external;\\n    \\n    /**\\n     * @notice Request a random number\\n     * @dev must call the RandomProvider that use ChainLinkVRFv2 \\n     */\\n    function drawnRandomTicket() external;\\n\\n    /**\\n     * @notice Select the winning tickets number received from the RandomProvider contract\\n     * @dev must be only called by the RandomProvider contract\\n     * @param randomNumber random number requested\\n     */\\n    function drawnTicket(uint256 randomNumber) external;\\n}\",\"keccak256\":\"0x19574fd6a4d50e52b3d3b10d6dcaede63b90ac47a429e9ae07c16436a883879f\",\"license\":\"MIT\"},\"src/interfaces/IRandomProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRandomProvider {\\n\\n    /**\\n     * @notice Request a random numbers using ChainLinkVRFv2\\n     */\\n    function requestRandomNumber() external;\\n}\",\"keccak256\":\"0x282b17c869528fc7e20b610cb2c9ede555863dc22f47eacf78ee7f15a6e78b8b\",\"license\":\"MIT\"},\"src/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the protocol\\n */\\nlibrary Errors {\\n    error BE_ADDRESS_0(); // 'Address must be address(0)'\\n    error NOT_ADDRESS_0(); // 'Address must not be address(0)'\\n    error RAFFLE_CLOSE(); // 'Current timestamps greater or equal than the close time'\\n    error RAFFLE_STILL_OPEN(); // 'Current timestamps lesser or equal than the close time'\\n    error CANT_BE_ZERO(); // 'Value can't must be higher than 0'\\n    error MAX_TICKET_SUPPLY_EXCEEDED(); // 'Maximum amount of ticket sold for the raffle has been reached'\\n    error NOT_ENOUGH_BALANCE(); // 'Balance lower than required'\\n    error MSG_SENDER_NOT_WINNER(); // 'msg.sender is not winner address'\\n    error NOT_CREATOR(); // 'msg.sender is not the creator of the raffle'\\n    error TICKET_NOT_DRAWN(); // 'ticket must be drawn'\\n    error TICKET_ALREADY_DRAWN(); // 'ticket has already be drawn'\\n    error NOT_MAINTAINER(); // 'Caller is not the maintainer'\\n    error IMPLEMENTATION_NOT_FOUND(); // 'Implementation interfaces is not registered'\\n    error NOT_RAFFLE_CONTRACT(); // 'Caller is not a raffle contract'\\n    error NOT_RANDOM_PROVIDER_CONTRACT(); // 'Caller is not the random provider contract'\\n}\\n\\n \",\"keccak256\":\"0x89a7cf7fe799ff73ef4684a816e357ccade377c98e39046df7384697db235563\",\"license\":\"MIT\"},\"src/libraries/helpers/ImplementationInterfaceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary ImplementationInterfaceNames {\\n  bytes32 public constant AccessController = 'AccessController';\\n  bytes32 public constant RandomProvider = 'RandomProvider';\\n  bytes32 public constant RaffleContract = 'RaffleContract';\\n}\\n\",\"keccak256\":\"0x462446959d657afab1a3d7678eca8ddb83e2f3026fb846b73c05756bee577d37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107ca3803806107ca83398101604081905261002f9161014b565b80516001600160a01b039081166080908152600180549483166001600160a01b0319958616179055825160008054919093169085168117909255600280549094169091179092556020810151600355604081015160048054606084015194909301516001600160401b0316660100000000000002600160301b600160701b031961ffff9095166401000000000265ffffffffffff1990941663ffffffff909316929092179290921792909216919091179055610208565b6001600160a01b03811681146100fb57600080fd5b50565b8051610109816100e6565b919050565b805163ffffffff8116811461010957600080fd5b805161ffff8116811461010957600080fd5b80516001600160401b038116811461010957600080fd5b60008082840360c081121561015f57600080fd5b835161016a816100e6565b925060a0601f198201121561017e57600080fd5b5060405160a081016001600160401b03811182821017156101af57634e487b7160e01b600052604160045260246000fd5b6040526101be602085016100fe565b8152604084015160208201526101d66060850161010e565b60408201526101e760808501610122565b60608201526101f860a08501610134565b6080820152809150509250929050565b6080516105a061022a6000396000818161018901526101cb01526105a06000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631fe543e3146100675780632bafa11b1461007c5780633b2bcbf1146100ac578063637c4320146100bf5780637ef9af4e146100e85780638678a7b214610176575b600080fd5b61007a610075366004610428565b61017e565b005b60015461008f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60005461008f906001600160a01b031681565b61008f6100cd3660046104f2565b6005602052600090815260409020546001600160a01b031681565b60025460035460045461012c926001600160a01b0316919063ffffffff811690640100000000810461ffff16906601000000000000900467ffffffffffffffff1685565b604080516001600160a01b039096168652602086019490945263ffffffff9092169284019290925261ffff909116606083015267ffffffffffffffff16608082015260a0016100a3565b61007a61020a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fc5760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b6102068282610384565b5050565b6001546040516302abf57960e61b81526d149859999b1950dbdb9d1c9858dd60921b600482015233916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610263573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610287919061050b565b6001600160a01b0316146102ae57604051635b4a90ad60e11b815260040160405180910390fd5b60008054600354600480546040516305d3b1d360e41b8152918201929092526601000000000000820467ffffffffffffffff166024820152640100000000820461ffff16604482015263ffffffff9091166064820152600160848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af115801561033f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610363919061053b565b600090815260056020526040902080546001600160a01b0319163317905550565b60008281526005602052604081205482516001600160a01b03909116916387409f3c918491906103b6576103b6610554565b60200260200101516040518263ffffffff1660e01b81526004016103dc91815260200190565b600060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561043b57600080fd5b8235915060208084013567ffffffffffffffff8082111561045b57600080fd5b818601915086601f83011261046f57600080fd5b81358181111561048157610481610412565b8060051b604051601f19603f830116810181811085821117156104a6576104a6610412565b6040529182528482019250838101850191898311156104c457600080fd5b938501935b828510156104e2578435845293850193928501926104c9565b8096505050505050509250929050565b60006020828403121561050457600080fd5b5035919050565b60006020828403121561051d57600080fd5b81516001600160a01b038116811461053457600080fd5b9392505050565b60006020828403121561054d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122070e03bfc064d24d0431b9e92a67c0d206b3de3d33aa3f8afaa7d64e6667f260b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631fe543e3146100675780632bafa11b1461007c5780633b2bcbf1146100ac578063637c4320146100bf5780637ef9af4e146100e85780638678a7b214610176575b600080fd5b61007a610075366004610428565b61017e565b005b60015461008f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60005461008f906001600160a01b031681565b61008f6100cd3660046104f2565b6005602052600090815260409020546001600160a01b031681565b60025460035460045461012c926001600160a01b0316919063ffffffff811690640100000000810461ffff16906601000000000000900467ffffffffffffffff1685565b604080516001600160a01b039096168652602086019490945263ffffffff9092169284019290925261ffff909116606083015267ffffffffffffffff16608082015260a0016100a3565b61007a61020a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fc5760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b6102068282610384565b5050565b6001546040516302abf57960e61b81526d149859999b1950dbdb9d1c9858dd60921b600482015233916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610263573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610287919061050b565b6001600160a01b0316146102ae57604051635b4a90ad60e11b815260040160405180910390fd5b60008054600354600480546040516305d3b1d360e41b8152918201929092526601000000000000820467ffffffffffffffff166024820152640100000000820461ffff16604482015263ffffffff9091166064820152600160848201526001600160a01b0390911690635d3b1d309060a4016020604051808303816000875af115801561033f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610363919061053b565b600090815260056020526040902080546001600160a01b0319163317905550565b60008281526005602052604081205482516001600160a01b03909116916387409f3c918491906103b6576103b6610554565b60200260200101516040518263ffffffff1660e01b81526004016103dc91815260200190565b600060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561043b57600080fd5b8235915060208084013567ffffffffffffffff8082111561045b57600080fd5b818601915086601f83011261046f57600080fd5b81358181111561048157610481610412565b8060051b604051601f19603f830116810181811085821117156104a6576104a6610412565b6040529182528482019250838101850191898311156104c457600080fd5b938501935b828510156104e2578435845293850193928501926104c9565b8096505050505050509250929050565b60006020828403121561050457600080fd5b5035919050565b60006020828403121561051d57600080fd5b81516001600160a01b038116811461053457600080fd5b9392505050565b60006020828403121561054d57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122070e03bfc064d24d0431b9e92a67c0d206b3de3d33aa3f8afaa7d64e6667f260b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "requestRandomNumber()": {
        "notice": "Request a random numbers using ChainLinkVRFv2"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4275,
        "contract": "src/core/RandomProvider.sol:RandomProvider",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(VRFCoordinatorV2Interface)153"
      },
      {
        "astId": 4278,
        "contract": "src/core/RandomProvider.sol:RandomProvider",
        "label": "implementationManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IImplementationManager)4449"
      },
      {
        "astId": 4281,
        "contract": "src/core/RandomProvider.sol:RandomProvider",
        "label": "chainlinkVRFData",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ChainlinkVRFData)4272_storage"
      },
      {
        "astId": 4285,
        "contract": "src/core/RandomProvider.sol:RandomProvider",
        "label": "requestIdToAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IImplementationManager)4449": {
        "encoding": "inplace",
        "label": "contract IImplementationManager",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)153": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ChainlinkVRFData)4272_storage": {
        "encoding": "inplace",
        "label": "struct RandomProvider.ChainlinkVRFData",
        "members": [
          {
            "astId": 4263,
            "contract": "src/core/RandomProvider.sol:RandomProvider",
            "label": "vrfCoordinator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4265,
            "contract": "src/core/RandomProvider.sol:RandomProvider",
            "label": "keyHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4267,
            "contract": "src/core/RandomProvider.sol:RandomProvider",
            "label": "callbackGasLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 4269,
            "contract": "src/core/RandomProvider.sol:RandomProvider",
            "label": "requestConfirmations",
            "offset": 4,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 4271,
            "contract": "src/core/RandomProvider.sol:RandomProvider",
            "label": "subscriptionId",
            "offset": 6,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}