{
  "address": "0x28be2C99BABba484dc4DE25416B7e2CD53d04d1C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IImplementationManager",
          "name": "_implementationManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "raffleContract",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "purchaseCurrency",
              "type": "address"
            },
            {
              "internalType": "contract IERC721",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTicketSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "ticketSaleDuration",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct IRaffleFactory.Params",
          "name": "globalData",
          "type": "tuple"
        }
      ],
      "name": "NewRaffle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_raffleContracts",
          "type": "address[]"
        }
      ],
      "name": "batchRaffleDrawnTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "purchaseCurrency",
              "type": "address"
            },
            {
              "internalType": "contract IERC721",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTicketSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "ticketSaleDuration",
              "type": "uint64"
            }
          ],
          "internalType": "struct IRaffleFactory.Params",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "createNewRaffle",
      "outputs": [
        {
          "internalType": "contract Raffle",
          "name": "newRaffle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegisteredRaffle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdToContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ed3825e90360af7ab363a079091d0b983a6ce227116cf2e392e08063a77a947",
  "receipt": {
    "to": null,
    "from": "0x94e1EBc6464Ff4c0043fF4dD2b8941c655681C44",
    "contractAddress": "0x28be2C99BABba484dc4DE25416B7e2CD53d04d1C",
    "transactionIndex": 149,
    "gasUsed": "1655290",
    "logsBloom": "0x
    "blockHash": "0x446f2dbe383cf2a25cb68f303fe599503f4ac3aee4bbebd283bf713372ed74d5",
    "transactionHash": "0x2ed3825e90360af7ab363a079091d0b983a6ce227116cf2e392e08063a77a947",
    "logs": [],
    "blockNumber": 8566535,
    "cumulativeGasUsed": "20265775",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x157d5673250BfD323Bdc6161C6dF767b8E6cC567"
  ],
  "numDeployments": 1,
  "solcInputHash": "bd7801c8e23f97189b0335e98fa2af0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IImplementationManager\",\"name\":\"_implementationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raffleContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"purchaseCurrency\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTicketSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ticketSaleDuration\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct IRaffleFactory.Params\",\"name\":\"globalData\",\"type\":\"tuple\"}],\"name\":\"NewRaffle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_raffleContracts\",\"type\":\"address[]\"}],\"name\":\"batchRaffleDrawnTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"purchaseCurrency\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTicketSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ticketSaleDuration\",\"type\":\"uint64\"}],\"internalType\":\"struct IRaffleFactory.Params\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createNewRaffle\",\"outputs\":[{\"internalType\":\"contract Raffle\",\"name\":\"newRaffle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegisteredRaffle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchRaffleDrawnTickets(address[])\":{\"params\":{\"_raffleContracts\":\"the array of raffle addresses to call drawnTickets()\"}},\"createNewRaffle((address,address,uint256,uint256,uint256,uint64))\":{\"details\":\"must transfer the nft to the contract before initialize()\",\"params\":{\"_params\":\"used for initialization (see Params struct in RaffleFactory.sol)\"},\"returns\":{\"newRaffle\":\"the instance of the raffle contract\"}},\"randomProvider()\":{\"returns\":{\"_0\":\"The address of the randomProvider contract\"}}},\"stateVariables\":{\"isRegisteredRaffle\":{\"params\":{\"_raffleAddress\":\"the address to check\"},\"return\":\"bool is true if it's a raffle deployed by this factory, false otherwise\",\"returns\":{\"_0\":\"bool is true if it's a raffle deployed by this factory, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchRaffleDrawnTickets(address[])\":{\"notice\":\"call by batch drawnTickets() for each raffleContract passed\"},\"createNewRaffle((address,address,uint256,uint256,uint256,uint64))\":{\"notice\":\"Deploy a new raffle contract\"},\"isRegisteredRaffle(address)\":{\"notice\":\"Return if the address is a raffle deployed by this factory\"},\"randomProvider()\":{\"notice\":\"get the randomProvider contract address from the implementationManager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/raffle/RaffleFactory.sol\":\"RaffleFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363737353037353438313938\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0e1fe02da411a6293004e5ee85bdd1facef5f1b6ef2aab8d36c73f0d77b448db\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xef38a9dc04006cb780740ff85651f9bac7e522f42640527b6b1deda46e3155c7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41bbb2c41036ca64b2f6c9e973e8cfaa113ebc42af86702cd0d267f915a7e886\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e53602b96c1bf97c731ed3e2a981b4f85e23a9410a5ebd36e549a4cc93340dc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/interfaces/IImplementationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IImplementationManager{\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(\\n        bytes32 interfaceName,\\n        address implementationAddress\\n    ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address implementationAddress);\\n\\n}\",\"keccak256\":\"0x77bef3e7ed09382acfe4011fdc7371857e6bd0b44b83c1534380cd5b9b29702e\",\"license\":\"MIT\"},\"src/interfaces/IRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {RaffleDataTypes} from '../raffle/RaffleDataTypes.sol';\\n\\ninterface IRaffle {\\n    /**\\n     * @notice Function to initialize contract\\n     * @dev must be tag by the initializer function \\n     * @param _params used for initialization (see InitRaffleParams struct)\\n     */\\n    function initialize(RaffleDataTypes.InitRaffleParams memory _params) external;\\n\\n    /**\\n     * @notice Allows users to purchase tickets\\n     * @dev Only accessible if raffle still open to particpants\\n     * @param nbOfTickets number of tickets purchased\\n     */\\n    function purchaseTickets(uint256 nbOfTickets) external;\\n\\n    /**\\n     * @notice Allows the winner to claim his price\\n     * @dev Ticket number must be draw and raffle close to new participants\\n     */\\n    function claimPrice() external;\\n    \\n    /**\\n     * @notice Allows the creator to claim the amount related to the ticket sales\\n     * @dev The functions should send to the creator his part after fees\\n     */\\n    function claimTicketSalesAmount() external;\\n    \\n    /**\\n     * @notice Request a random numbers\\n     * @dev must call the RandomProvider that use ChainLinkVRFv2 \\n     */\\n    function drawnTickets() external;\\n\\n    /**\\n     * @notice Select the winning tickets number received from the RandomProvider contract\\n     * @dev must be only called by the RandomProvider contract or the RaffleFactory\\n     * @dev function must not revert to avoid multi drawn to be reverted\\n     * @param randomNumbers random numbers requested in array\\n     */\\n    function drawnTickets(uint256[] memory randomNumbers) external;\\n\\n      /**\\n    * @notice get the total amount of tickets sold\\n    * @return The total amount of tickets sold\\n    */\\n    function totalSupply() external view returns(uint256);\\n\\n    /**\\n    * @notice get the max amount of tickets that can be sold\\n    * @return The total amount of tickets sold\\n    */\\n    function maxSupply() external view returns(uint256);\\n\\n    /**\\n    * @notice get the address of the wallet that initiated the raffle\\n    * @return The address of the creator\\n    */\\n    function creator() external view returns(address);\\n\\n    /**\\n    * @notice get the address of the token used to buy tickets\\n    * @return The address of the ERC20\\n    */\\n    function purchaseCurrency() external view returns(IERC20);\\n\\n    /**\\n    * @notice get the price of one ticket\\n    * @return The amount of token that one ticket cost\\n    */\\n    function ticketPrice() external view returns(uint256);\\n\\n   /**\\n    * @notice get the end time where ticket sales closing\\n    * @return The time in timestamps\\n    */\\n    function endTicketSales() external view returns(uint64);\\n    \\n    /**\\n    * @notice get the winning ticket number\\n    * @dev revert if ticket sales not close and if ticket number hasn't be drawn\\n    * @return The ticket number that win the raffle\\n    */\\n    function winningTicket() external view returns(uint256);\\n    \\n    /**\\n    * @notice get the winner address\\n    * @dev revert if ticket sales not close and if ticket number hasn't be drawn\\n    * @return The address of the wallet that won the raffle\\n    */\\n    function winnerAddress() external view returns(address);\\n\\n    /**\\n    * @notice get the information regarding the nft to win\\n    * @return nftContractAddress The address of the nft\\n    * @return nftId The id of the nft\\n    */\\n    function nftToWin() external view returns(IERC721 nftContractAddress, uint256 nftId);\\n\\n    /**\\n    * @notice get info regarding the workflow status of the raffle\\n    * @return The status regarding the RaffleStatus enum \\n    */\\n    function raffleStatus() external view returns(RaffleDataTypes.RaffleStatus);\\n\\n    /**\\n    * @notice get all tickets number bought by a user\\n    * @return True if ticket has been drawn, False otherwise\\n    */\\n    function balanceOf(address user) external view returns(uint256[] memory);\\n\\n    /**\\n    * @notice get the wallet that bought a specific ticket number\\n    * @return The address that bought the own the ticket\\n    */\\n    function ownerOf(uint256 id) external view returns(address);\\n\\n   /**\\n    * @notice get the randomProvider contract address from the implementationManager\\n    * @return The address of the randomProvider contract\\n    */\\n    function randomProvider() external view returns(address);\\n    \\n}\",\"keccak256\":\"0x813ab04bb2d278a4ce2892a41496af3bebefcfd30dc0d450cd56a8631b59d8f8\",\"license\":\"MIT\"},\"src/interfaces/IRaffleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {RaffleDataTypes} from '../raffle/RaffleDataTypes.sol';\\nimport {Raffle} from '../raffle/Raffle.sol';\\n\\ninterface IRaffleFactory {\\n    struct Params {\\n        IERC20 purchaseCurrency;\\n        IERC721 nftContract;\\n        uint256 nftId;\\n        uint256 maxTicketSupply;\\n        uint256 ticketPrice;\\n        uint64 ticketSaleDuration;\\n    }\\n\\n    /**\\n     * @notice Deploy a new raffle contract\\n     * @dev must transfer the nft to the contract before initialize()\\n     * @param _params used for initialization (see Params struct in RaffleFactory.sol)\\n     * @return newRaffle the instance of the raffle contract\\n     */\\n    function createNewRaffle(Params memory _params) external returns(Raffle newRaffle);\\n\\n\\n    /**\\n     * @notice Return if the address is a raffle deployed by this factory\\n     * @param _raffleAddress the address to check\\n     * @return bool is true if it's a raffle deployed by this factory, false otherwise\\n     */\\n    function isRegisteredRaffle(address _raffleAddress) external view returns (bool);\\n\\n    /**\\n     * @notice call by batch drawnTickets() for each raffleContract passed\\n     * @param _raffleContracts the array of raffle addresses to call drawnTickets()\\n     */\\n    function batchRaffleDrawnTickets(address[] memory _raffleContracts) external;\\n    \\n}\",\"keccak256\":\"0xc2cba1c3ee3f33da1e6b8973039d19057158827b2fba9ec2dd9f309ce7035d11\",\"license\":\"MIT\"},\"src/interfaces/IRandomProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRandomProvider {\\n\\n    /**\\n     * @notice Request a random numbers using ChainLinkVRFv2\\n     * @param numWords number of random number requested\\n     * @return requestId return by ChainLink\\n     */\\n    function requestRandomNumbers(uint32 numWords) external returns(uint256 requestId);\\n}\",\"keccak256\":\"0x7145f06831cdfbb82f1bfeaf0e02ce05c0aa8c697bfd6e9a6ff22ad7e42c27f3\",\"license\":\"MIT\"},\"src/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the protocol\\n */\\nlibrary Errors {\\n    error BE_ADDRESS_0(); // 'Address must be address(0)'\\n    error NOT_ADDRESS_0(); // 'Address must not be address(0)'\\n    error RAFFLE_CLOSE(); // 'Current timestamps greater or equal than the close time'\\n    error RAFFLE_STILL_OPEN(); // 'Current timestamps lesser or equal than the close time'\\n    error CANT_BE_ZERO(); // 'Value can't must be higher than 0'\\n    error MAX_TICKET_SUPPLY_EXCEEDED(); // 'Maximum amount of ticket sold for the raffle has been reached'\\n    error NOT_ENOUGH_BALANCE(); // 'Balance lower than required'\\n    error MSG_SENDER_NOT_WINNER(); // 'msg.sender is not winner address'\\n    error NOT_CREATOR(); // 'msg.sender is not the creator of the raffle'\\n    error TICKET_NOT_DRAWN(); // 'ticket must be drawn'\\n    error TICKET_ALREADY_DRAWN(); // 'ticket has already be drawn'\\n    error TICKET_DRAWN_NOT_REQUESTED(); // 'ticket drawn has not be requested'\\n    error NOT_MAINTAINER(); // 'Caller is not the maintainer'\\n    error IMPLEMENTATION_NOT_FOUND(); // 'Implementation interfaces is not registered'\\n    error NOT_RAFFLE_CONTRACT(); // 'Caller is not a raffle contract'\\n    error NOT_RANDOM_PROVIDER_CONTRACT(); // 'Caller is not the random provider contract'\\n    error NOT_NFT_OWNER(); // 'Address not the nft owner'\\n    error ARRAYS_LENGTH_NOT_EQUAL(); // 'Arrays doesn't have the same size'\\n}\\n\\n \",\"keccak256\":\"0xbe370ddba8b233a251aaf106dedcc8b118729fd9042d76c894cee260e2e7105b\",\"license\":\"MIT\"},\"src/libraries/helpers/ImplementationInterfaceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary ImplementationInterfaceNames {\\n  bytes32 public constant AccessController = 'AccessController';\\n  bytes32 public constant RandomProvider = 'RandomProvider';\\n  bytes32 public constant RaffleFactory = 'RaffleFactory';\\n}\\n\",\"keccak256\":\"0xb54b8f0086754913a375d867cd34a2aec1f51c3d6c06357485c9ac2979da8778\",\"license\":\"MIT\"},\"src/raffle/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {Initializable} from \\\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {ImplementationInterfaceNames} from \\\"../libraries/helpers/ImplementationInterfaceNames.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\n\\nimport {IRaffle} from \\\"../interfaces/IRaffle.sol\\\";\\nimport {IRandomProvider} from \\\"../interfaces/IRandomProvider.sol\\\";\\n\\nimport {RaffleDataTypes} from \\\"./RaffleDataTypes.sol\\\";\\n\\n \\ncontract Raffle is IRaffle, Initializable {\\n\\n    //----------------------------------------\\n    // Storage\\n    //----------------------------------------\\n\\n    // Mapping from ticket ID to owner address\\n    mapping(uint256 => address) internal _ticketOwner;\\n\\n    // Mapping owner address to tickets list\\n    mapping(address => uint256[]) internal _ownerTickets;\\n\\n    RaffleDataTypes.RaffleData internal _globalData;\\n\\n\\n    //----------------------------------------\\n    // Events\\n    //----------------------------------------\\n\\n    event TicketPurchased(address indexed raffleContract, address indexed buyer, uint256[] ticketNumbers);\\n    event WinnerClaimedPrice(address indexed raffleContract, address indexed winner, address indexed nftContract, uint256 nftId);\\n    event CreatorClaimTicketSalesAmount(address indexed raffleContract, address indexed winner, uint256 amountReceived);\\n    event WinningTicketDrawned(address indexed raffleContract, uint256 winningTicket);\\n      \\n    //----------------------------------------\\n    // Modifier\\n    //----------------------------------------\\n\\n    modifier ticketSalesOpen() {\\n        if(block.timestamp >= endTicketSales()) revert Errors.RAFFLE_CLOSE();\\n        _;\\n    }\\n    \\n    modifier ticketSalesClose() {\\n        if(block.timestamp < endTicketSales()) revert Errors.RAFFLE_STILL_OPEN();\\n        _;\\n    }\\n\\n    modifier ticketHasNotBeDrawn(){\\n        if(raffleStatus() == RaffleDataTypes.RaffleStatus.WinningTicketsDrawned) revert Errors.TICKET_ALREADY_DRAWN();\\n        _;\\n    }\\n\\n    modifier ticketHasBeDrawn(){\\n        if(raffleStatus() != RaffleDataTypes.RaffleStatus.WinningTicketsDrawned) revert Errors.TICKET_NOT_DRAWN();\\n        _;\\n    }\\n\\n    modifier drawnRequested(){\\n        if(raffleStatus() != RaffleDataTypes.RaffleStatus.DrawnRequested) revert Errors.TICKET_DRAWN_NOT_REQUESTED();\\n        _;\\n    }\\n    \\n    modifier onlyRandomProviderContract(){\\n        if(randomProvider() != msg.sender) revert Errors.NOT_RANDOM_PROVIDER_CONTRACT();\\n        _;\\n    }\\n\\n    //----------------------------------------\\n    // Initialize function\\n    //----------------------------------------\\n    function initialize(RaffleDataTypes.InitRaffleParams memory _params) external override initializer {\\n        _checkData(_params);\\n        _globalData.implementationManager = _params.implementationManager;\\n        _globalData.creator = _params.creator;\\n        _globalData.purchaseCurrency = _params.purchaseCurrency;\\n        _globalData.nftContract = _params.nftContract;\\n        _globalData.nftId = _params.nftId;\\n        _globalData.maxTicketSupply = _params.maxTicketSupply;\\n        _globalData.ticketPrice = _params.ticketPrice;\\n        _globalData.endTicketSales = uint64(block.timestamp) + _params.ticketSaleDuration;\\n    }\\n\\n    //----------------------------------------\\n    // Externals Functions\\n    //----------------------------------------\\n\\n    /// @inheritdoc IRaffle\\n    function purchaseTickets(uint256 nbOfTickets) external override ticketSalesOpen(){\\n        if(nbOfTickets == 0) revert Errors.CANT_BE_ZERO();\\n        if(totalSupply() + nbOfTickets > _globalData.maxTicketSupply) revert Errors.MAX_TICKET_SUPPLY_EXCEEDED();\\n        if(_calculateTotalTicketsPrice(nbOfTickets) > _globalData.purchaseCurrency.balanceOf(msg.sender)) revert Errors.NOT_ENOUGH_BALANCE();\\n        \\n        _globalData.purchaseCurrency.transferFrom(msg.sender, address(this), _calculateTotalTicketsPrice(nbOfTickets));\\n\\n        uint256[] storage ownerTickets = _ownerTickets[msg.sender];\\n        uint256 ticketNumber = _globalData.ticketSupply;\\n\\n        uint256[] memory ticketsPurchased = new uint256[](nbOfTickets);\\n        for(uint i; i<nbOfTickets; ){\\n            ++ticketNumber;\\n            ticketsPurchased[i] = ticketNumber;\\n            ownerTickets.push(ticketNumber);\\n            _ticketOwner[ticketNumber] = msg.sender;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _globalData.ticketSupply = ticketNumber;\\n        emit TicketPurchased(address(this), msg.sender, ticketsPurchased);\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function drawnTickets() external override ticketSalesClose() ticketHasNotBeDrawn() {\\n        _globalData.status = RaffleDataTypes.RaffleStatus.DrawnRequested;\\n        IRandomProvider(randomProvider()).requestRandomNumbers(1);\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function drawnTickets(uint256[] memory randomNumbers) external override onlyRandomProviderContract() drawnRequested() {\\n        if( randomNumbers[0] == 0 && randomNumbers.length == 0){\\n            _globalData.status = RaffleDataTypes.RaffleStatus.Init;\\n        }\\n        _globalData.winningTicketNumber = (randomNumbers[0] % _globalData.ticketSupply) + 1;\\n        _globalData.status = RaffleDataTypes.RaffleStatus.WinningTicketsDrawned;\\n        emit WinningTicketDrawned(address(this), _globalData.winningTicketNumber );\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function claimPrice() external override ticketSalesClose() ticketHasBeDrawn(){\\n        if(msg.sender != winnerAddress()) revert Errors.MSG_SENDER_NOT_WINNER();\\n        _globalData.nftContract.safeTransferFrom(address(this), msg.sender,_globalData.nftId);\\n        emit WinnerClaimedPrice(address(this), msg.sender, address(_globalData.nftContract), _globalData.nftId);\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function claimTicketSalesAmount() external override ticketSalesClose() ticketHasBeDrawn(){\\n        if(msg.sender != creator()) revert Errors.NOT_CREATOR();\\n        uint256 amount = _globalData.purchaseCurrency.balanceOf(address(this));\\n        _globalData.purchaseCurrency.transfer(msg.sender, amount);\\n        emit CreatorClaimTicketSalesAmount(address(this), msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function totalSupply() public override view returns(uint256) {\\n        return _globalData.ticketSupply;\\n    }\\n\\n   /// @inheritdoc IRaffle\\n    function maxSupply() public override view returns(uint256) {\\n        return _globalData.maxTicketSupply;\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function creator() public override view returns(address) {\\n        return _globalData.creator;\\n    }\\n\\n   /// @inheritdoc IRaffle\\n    function purchaseCurrency() public override view returns(IERC20) {\\n        return _globalData.purchaseCurrency;\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function ticketPrice() public override view returns(uint256) {\\n        return _globalData.ticketPrice;\\n    }\\n\\n   /// @inheritdoc IRaffle\\n    function endTicketSales() public override view returns(uint64) {\\n        return _globalData.endTicketSales;\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function winningTicket() public override view ticketSalesClose() ticketHasBeDrawn() returns(uint256) {\\n        return _globalData.winningTicketNumber;\\n    }\\n    \\n    /// @inheritdoc IRaffle\\n    function winnerAddress() public override view ticketSalesClose() ticketHasBeDrawn() returns(address) {\\n        return _ticketOwner[_globalData.winningTicketNumber];\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function nftToWin() public override view returns(IERC721 nftContractAddress, uint256 nftId) {\\n        return (_globalData.nftContract, _globalData.nftId);\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function raffleStatus() public override view returns(RaffleDataTypes.RaffleStatus){\\n        return  _globalData.status;\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function balanceOf(address user) public override view returns(uint256[] memory){\\n        return _ownerTickets[user];\\n    }\\n\\n    /// @inheritdoc IRaffle\\n    function ownerOf(uint256 id) public override view returns(address){\\n        return _ticketOwner[id];\\n    }\\n\\n   /// @inheritdoc IRaffle\\n    function randomProvider() public override view returns(address){\\n        return _globalData.implementationManager.getImplementationAddress(ImplementationInterfaceNames.RandomProvider);\\n    }\\n\\n    //----------------------------------------\\n    // Internals Functions\\n    //----------------------------------------\\n    \\n    /**\\n    * @notice check that initialize data are correct\\n    * @param _params the struct data use for initialization\\n    */\\n    function _checkData(RaffleDataTypes.InitRaffleParams memory _params) internal view {\\n        if(address(_params.implementationManager) == address(0)) revert Errors.NOT_ADDRESS_0();\\n        if(address(_params.purchaseCurrency) == address(0)) revert Errors.NOT_ADDRESS_0();\\n        if(_params.nftContract.ownerOf(_params.nftId) != address(this)) revert Errors.NOT_NFT_OWNER();\\n        if(_params.creator == address(0)) revert Errors.NOT_ADDRESS_0();\\n        if(_params.ticketPrice == 0) revert Errors.CANT_BE_ZERO();\\n        if(_params.maxTicketSupply == 0) revert Errors.CANT_BE_ZERO();\\n        if(_params.ticketSaleDuration == 0) revert Errors.CANT_BE_ZERO();\\n    }\\n\\n    /**\\n    * @notice calculate the total price that must be paid regarding the amount of tickets to buy\\n    * @return amountPrice the total cost\\n    */\\n    function _calculateTotalTicketsPrice(uint256 nbOfTickets) internal view returns(uint256 amountPrice) {\\n        amountPrice = _globalData.ticketPrice * nbOfTickets;\\n    }\\n}\",\"keccak256\":\"0x78c04176e551be78a92b521dee0346246d845d009080471879e5c2a2a7d84e7d\",\"license\":\"MIT\"},\"src/raffle/RaffleDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IImplementationManager} from \\\"../interfaces/IImplementationManager.sol\\\";\\n\\nlibrary RaffleDataTypes {\\n\\n    enum RaffleStatus {\\n        Init,\\n        DrawnRequested,\\n        WinningTicketsDrawned\\n    }\\n\\n    struct RaffleData {\\n        address creator;\\n        IERC20 purchaseCurrency;\\n        IImplementationManager implementationManager;\\n        IERC721 nftContract;\\n        uint256 nftId;\\n        uint256 maxTicketSupply;\\n        uint256 ticketSupply;\\n        uint256 ticketPrice;\\n        uint256 winningTicketNumber;\\n        uint64 endTicketSales;\\n        RaffleStatus status;\\n    }\\n\\n    struct InitRaffleParams {\\n        IImplementationManager implementationManager;\\n        IERC20 purchaseCurrency;\\n        IERC721 nftContract;\\n        address creator;\\n        uint256 nftId;\\n        uint256 maxTicketSupply;\\n        uint256 ticketPrice;\\n        uint64 ticketSaleDuration;\\n    }\\n}\",\"keccak256\":\"0x05004f37456e5a8ffb9f1bc6ed2340df5f731279da48941c104492443750d38f\",\"license\":\"MIT\"},\"src/raffle/RaffleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Clones} from \\\"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\\\";\\n\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\nimport {IImplementationManager} from \\\"../interfaces/IImplementationManager.sol\\\";\\nimport {IRandomProvider} from \\\"../interfaces/IRandomProvider.sol\\\";\\nimport {IRaffleFactory} from \\\"../interfaces/IRaffleFactory.sol\\\";\\n\\nimport {ImplementationInterfaceNames} from \\\"../libraries/helpers/ImplementationInterfaceNames.sol\\\";\\n\\nimport {RaffleDataTypes} from \\\"./RaffleDataTypes.sol\\\";\\nimport {Raffle} from \\\"./Raffle.sol\\\";\\n \\ncontract RaffleFactory is IRaffleFactory{\\n    using Clones for address;\\n\\n    //----------------------------------------\\n    // Storage\\n    //----------------------------------------\\n    IImplementationManager immutable implementationManager;\\n\\n    address immutable raffleImplementation;\\n\\n    mapping(address => bool) public override isRegisteredRaffle;\\n    \\n    mapping(uint256 => address[]) public requestIdToContracts;\\n\\n    //----------------------------------------\\n    // Events\\n    //----------------------------------------\\n    event NewRaffle(address indexed raffleContract, Params globalData);\\n\\n      \\n    //----------------------------------------\\n    // Modifier\\n    //----------------------------------------\\n\\n    modifier onlyRamdomProvider() {\\n        if(randomProvider() != msg.sender) revert Errors.NOT_RANDOM_PROVIDER_CONTRACT();\\n        _;\\n    }\\n\\n    //----------------------------------------\\n    // Constructor\\n    //----------------------------------------\\n    constructor(IImplementationManager _implementationManager){\\n        implementationManager = _implementationManager;\\n        raffleImplementation  = address(new Raffle());\\n    }\\n\\n    //----------------------------------------\\n    // External functions\\n    //----------------------------------------\\n\\n    /// @inheritdoc IRaffleFactory\\n    function createNewRaffle(Params memory _params) external override returns(Raffle newRaffle){\\n        newRaffle = Raffle(raffleImplementation.clone());\\n        _params.nftContract.transferFrom(msg.sender, address(newRaffle), _params.nftId);\\n        newRaffle.initialize(_convertParams(_params));\\n        isRegisteredRaffle[address(newRaffle)] = true;\\n        emit NewRaffle(address(newRaffle), _params);\\n    }\\n\\n    function batchRaffleDrawnTickets(address[] memory _raffleContracts) external override {\\n        for(uint32 i; i<_raffleContracts.length; ++i){\\n            Raffle(_raffleContracts[i]).drawnTickets();\\n        }\\n    }\\n    \\n    /**\\n    * @notice get the randomProvider contract address from the implementationManager\\n    * @return The address of the randomProvider contract\\n    */\\n    function randomProvider() public view returns(address){\\n        return implementationManager.getImplementationAddress(ImplementationInterfaceNames.RandomProvider);\\n    }\\n\\n    //----------------------------------------\\n    // Internal functions\\n    //----------------------------------------\\n    function _convertParams(Params memory _params) internal view returns(RaffleDataTypes.InitRaffleParams memory raffleParams){\\n        raffleParams = RaffleDataTypes.InitRaffleParams(\\n            implementationManager,\\n            _params.purchaseCurrency,\\n            _params.nftContract,\\n            msg.sender,\\n            _params.nftId,\\n            _params.maxTicketSupply,\\n            _params.ticketPrice,\\n            _params.ticketSaleDuration\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0xb44881937ad1a12390e303c1009167452a9f5165c39991f61d0392cec165e65b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051611d56380380611d5683398101604081905261002f91610084565b6001600160a01b03811660805260405161004890610077565b604051809103906000f080158015610064573d6000803e3d6000fd5b506001600160a01b031660a052506100b4565b61141d8061093983390190565b60006020828403121561009657600080fd5b81516001600160a01b03811681146100ad57600080fd5b9392505050565b60805160a0516108596100e0600039600061018f01526000818161029d015261047b01526108596000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806333a01c2b1461005c578063447742921461009457806381a4d142146100a95780638f46500e146100d4578063da053d8f146100dc575b600080fd5b61007f61006a3660046105e1565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100a76100a236600461064c565b6100ef565b005b6100bc6100b73660046106fe565b610188565b6040516001600160a01b03909116815260200161008b565b6100bc610452565b6100bc6100ea36600461079d565b6104f3565b60005b81518163ffffffff16101561018457818163ffffffff1681518110610119576101196107bf565b60200260200101516001600160a01b031663413c5f726040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561015b57600080fd5b505af115801561016f573d6000803e3d6000fd5b505050508061017d906107d5565b90506100f2565b5050565b60006101bc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661052b565b602083015160408085015190516323b872dd60e01b81523360048201526001600160a01b038085166024830152604482019290925292935016906323b872dd90606401600060405180830381600087803b15801561021957600080fd5b505af115801561022d573d6000803e3d6000fd5b50505050806001600160a01b0316634d1d303161030584604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c080880186905260e097880195909552875195860188526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811687528951811687860152938901519093168588015233858301529587015184870152860151838201529385015190820152929091015167ffffffffffffffff169082015290565b6040805160e084811b6001600160e01b031916825283516001600160a01b0390811660048401526020850151811660248401529284015183166044830152606084015190921660648201526080830151608482015260a083015160a482015260c083015160c482015291015167ffffffffffffffff1660e482015261010401600060405180830381600087803b15801561039e57600080fd5b505af11580156103b2573d6000803e3d6000fd5b505050506001600160a01b0381811660008181526020818152604091829020805460ff19166001179055815186518516815286820151909416908401528481015190830152606080850151908301526080808501519083015260a08085015167ffffffffffffffff1690830152907f6ad154c6e4272962da2be5932717cfce555489673cee99d99cfbd1c9742b3f859060c00160405180910390a2919050565b6040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aafd5e4090602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610806565b905090565b6001602052816000526040600020818154811061050f57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166105c45760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b6001600160a01b03811681146105de57600080fd5b50565b6000602082840312156105f357600080fd5b81356105fe816105c9565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561064457610644610605565b604052919050565b6000602080838503121561065f57600080fd5b823567ffffffffffffffff8082111561067757600080fd5b818501915085601f83011261068b57600080fd5b81358181111561069d5761069d610605565b8060051b91506106ae84830161061b565b81815291830184019184810190888411156106c857600080fd5b938501935b838510156106f257843592506106e2836105c9565b82825293850193908501906106cd565b98975050505050505050565b600060c0828403121561071057600080fd5b60405160c0810167ffffffffffffffff828210818311171561073457610734610605565b8160405284359150610745826105c9565b908252602084013590610757826105c9565b81602084015260408501356040840152606085013560608401526080850135608084015260a08501359150808216821461079057600080fd5b5060a08201529392505050565b600080604083850312156107b057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036107fc57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60006020828403121561081857600080fd5b81516105fe816105c956fea2646970667358221220d66cc0b0dfa62294d07ee400741c908c0a7f4584570ad872373892e04754321164736f6c63430008110033608060405234801561001057600080fd5b506113fd806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636a4a5b2d116100ad578063cb784b4d11610071578063cb784b4d1461024a578063ccfa213e1461025d578063cf6622ab14610277578063d5abeb0114610292578063ed7a4e0b1461029a57600080fd5b80636a4a5b2d146101f657806370a08231146102075780638f46500e14610227578063a12776001461022f578063c26eea541461024257600080fd5b80633b398ff8116100f45780633b398ff814610174578063413c5f72146101aa5780634d1d3031146101b25780636352211e146101c5578063636ed74c146101ee57600080fd5b806302d05d3f146101265780631209b1f61461015057806315d655c91461016257806318160ddd1461016c575b600080fd5b6003546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b600a545b604051908152602001610147565b61016a6102a2565b005b600954610154565b61018b6006546007546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610147565b61016a6103fe565b61016a6101c036600461109f565b6104f3565b6101336101d3366004611153565b6000908152600160205260409020546001600160a01b031690565b61016a6106af565b6004546001600160a01b0316610133565b61021a61021536600461116c565b61086c565b6040516101479190611190565b6101336108d8565b61016a61023d366004611153565b61095b565b610154610c17565b61016a6102583660046111d4565b610c99565b600c54600160401b900460ff16604051610147919061128f565b600c546040516001600160401b039091168152602001610147565b600854610154565b610133610dce565b600c546001600160401b03164210156102ce57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156102ee576102ee611279565b1461030c576040516316de234960e11b815260040160405180910390fd5b610314610dce565b6001600160a01b0316336001600160a01b0316146103455760405163b4e5b12160e01b815260040160405180910390fd5b600654600754604051632142170760e11b815230600482015233602482015260448101919091526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b50506006546007546040519081526001600160a01b03909116925033915030907f1fc6b0218aceb86978fcfee181f91a4a3f28d1eddff4e6df0c3dc99c79ace6d49060200160405180910390a4565b600c546001600160401b031642101561042a57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff16600281111561044a5761044a611279565b0361046857604051630a7f733d60e41b815260040160405180910390fd5b600c805460ff60401b1916600160401b1790556104836108d8565b604051633b82d3fb60e11b8152600160048201526001600160a01b039190911690637705a7f6906024016020604051808303816000875af11580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906112b7565b50565b600054610100900460ff16158080156105135750600054600160ff909116105b8061052d5750303b15801561052d575060005460ff166001145b6105945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156105b7576000805461ff0019166101001790555b6105c082610e68565b8151600580546001600160a01b039283166001600160a01b031991821617909155606084015160038054918416918316919091179055602084015160048054918416918316919091179055604084015160068054919093169116179055608082015160075560a082015160085560c0820151600a5560e082015161064490426112e6565b600c805467ffffffffffffffff19166001600160401b039290921691909117905580156106ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600c546001600160401b03164210156106db57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156106fb576106fb611279565b14610719576040516316de234960e11b815260040160405180910390fd5b6003546001600160a01b0316331461074457604051632cff942760e01b815260040160405180910390fd5b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906112b7565b6004805460405163a9059cbb60e01b81523392810192909252602482018390529192506001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561080d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610831919061130d565b50604051818152339030907f2427926a2340a250197c73c9c1a12ca71ee0f1f53f8e08badda42770afc6ecf69060200160405180910390a350565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156108cc57602002820191906000526020600020905b8154815260200190600101908083116108b8575b50505050509050919050565b6005546040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610956919061132f565b905090565b600c546001600160401b031642106109865760405163377d0b8560e11b815260040160405180910390fd5b806000036109a7576040516398fccb2760e01b815260040160405180910390fd5b600854816109b460095490565b6109be919061134c565b11156109dd576040516384bfcb9560e01b815260040160405180910390fd5b600480546040516370a0823160e01b815233928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a91906112b7565b610a5382611006565b1115610a725760405163119563e560e31b815260040160405180910390fd5b6004546001600160a01b03166323b872dd3330610a8e85611006565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b06919061130d565b503360009081526002602052604081206009549091836001600160401b03811115610b3357610b3361101d565b604051908082528060200260200182016040528015610b5c578160200160208202803683370190505b50905060005b84811015610bcf57610b738361135f565b925082828281518110610b8857610b88611378565b6020908102919091018101919091528454600181810187556000878152838120909201869055858252918290526040902080546001600160a01b0319163317905501610b62565b506009829055604051339030907f3298f998adc3ec4bdcc9bb12f2a924f1d28c61596124855d7d6d4d09e231847a90610c09908590611190565b60405180910390a350505050565b6000610c2b600c546001600160401b031690565b6001600160401b0316421015610c5457604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610c7457610c74611279565b14610c92576040516316de234960e11b815260040160405180910390fd5b50600b5490565b33610ca26108d8565b6001600160a01b031614610cc95760405163170cd40b60e31b815260040160405180910390fd5b6001600c54600160401b900460ff166002811115610ce957610ce9611279565b14610d07576040516345a4ca3b60e11b815260040160405180910390fd5b80600081518110610d1a57610d1a611378565b60200260200101516000148015610d3057508051155b15610d4357600c805460ff60401b191690555b60036006015481600081518110610d5c57610d5c611378565b6020026020010151610d6e919061138e565b610d7990600161134c565b600b819055600c805460ff60401b191668020000000000000000179055604080519182525130917fbd2ef7d8e723142e22eed26d859400cda0ac602edacddc8b13f96c921011a9ac919081900360200190a250565b6000610de2600c546001600160401b031690565b6001600160401b0316421015610e0b57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610e2b57610e2b611279565b14610e49576040516316de234960e11b815260040160405180910390fd5b50600b546000908152600160205260409020546001600160a01b031690565b80516001600160a01b0316610e9057604051639f34e01960e01b815260040160405180910390fd5b60208101516001600160a01b0316610ebb57604051639f34e01960e01b815260040160405180910390fd5b306001600160a01b031681604001516001600160a01b0316636352211e83608001516040518263ffffffff1660e01b8152600401610efb91815260200190565b602060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c919061132f565b6001600160a01b031614610f6357604051637bed417b60e01b815260040160405180910390fd5b60608101516001600160a01b0316610f8e57604051639f34e01960e01b815260040160405180910390fd5b8060c00151600003610fb3576040516398fccb2760e01b815260040160405180910390fd5b8060a00151600003610fd8576040516398fccb2760e01b815260040160405180910390fd5b8060e001516001600160401b03166000036104f0576040516398fccb2760e01b815260040160405180910390fd5b600a546000906110179083906113b0565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561105b5761105b61101d565b604052919050565b6001600160a01b03811681146104f057600080fd5b803561108381611063565b919050565b80356001600160401b038116811461108357600080fd5b60006101008083850312156110b357600080fd5b604051908101906001600160401b03821181831017156110d5576110d561101d565b81604052833591506110e682611063565b8181526110f560208501611078565b602082015261110660408501611078565b604082015261111760608501611078565b60608201526080840135608082015260a084013560a082015260c084013560c082015261114660e08501611088565b60e0820152949350505050565b60006020828403121561116557600080fd5b5035919050565b60006020828403121561117e57600080fd5b813561118981611063565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156111c8578351835292840192918401916001016111ac565b50909695505050505050565b600060208083850312156111e757600080fd5b82356001600160401b03808211156111fe57600080fd5b818501915085601f83011261121257600080fd5b8135818111156112245761122461101d565b8060051b9150611235848301611033565b818152918301840191848101908884111561124f57600080fd5b938501935b8385101561126d57843582529385019390850190611254565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106112b157634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156112c957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115611306576113066112d0565b5092915050565b60006020828403121561131f57600080fd5b8151801515811461118957600080fd5b60006020828403121561134157600080fd5b815161118981611063565b80820180821115611017576110176112d0565b600060018201611371576113716112d0565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000826113ab57634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417611017576110176112d056fea264697066735822122045e8e0259963e20293a7b7a2c016f53e7baa4470c1655f8d714e38e6ad33a6d464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806333a01c2b1461005c578063447742921461009457806381a4d142146100a95780638f46500e146100d4578063da053d8f146100dc575b600080fd5b61007f61006a3660046105e1565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100a76100a236600461064c565b6100ef565b005b6100bc6100b73660046106fe565b610188565b6040516001600160a01b03909116815260200161008b565b6100bc610452565b6100bc6100ea36600461079d565b6104f3565b60005b81518163ffffffff16101561018457818163ffffffff1681518110610119576101196107bf565b60200260200101516001600160a01b031663413c5f726040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561015b57600080fd5b505af115801561016f573d6000803e3d6000fd5b505050508061017d906107d5565b90506100f2565b5050565b60006101bc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661052b565b602083015160408085015190516323b872dd60e01b81523360048201526001600160a01b038085166024830152604482019290925292935016906323b872dd90606401600060405180830381600087803b15801561021957600080fd5b505af115801561022d573d6000803e3d6000fd5b50505050806001600160a01b0316634d1d303161030584604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c080880186905260e097880195909552875195860188526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811687528951811687860152938901519093168588015233858301529587015184870152860151838201529385015190820152929091015167ffffffffffffffff169082015290565b6040805160e084811b6001600160e01b031916825283516001600160a01b0390811660048401526020850151811660248401529284015183166044830152606084015190921660648201526080830151608482015260a083015160a482015260c083015160c482015291015167ffffffffffffffff1660e482015261010401600060405180830381600087803b15801561039e57600080fd5b505af11580156103b2573d6000803e3d6000fd5b505050506001600160a01b0381811660008181526020818152604091829020805460ff19166001179055815186518516815286820151909416908401528481015190830152606080850151908301526080808501519083015260a08085015167ffffffffffffffff1690830152907f6ad154c6e4272962da2be5932717cfce555489673cee99d99cfbd1c9742b3f859060c00160405180910390a2919050565b6040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aafd5e4090602401602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610806565b905090565b6001602052816000526040600020818154811061050f57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166105c45760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b6001600160a01b03811681146105de57600080fd5b50565b6000602082840312156105f357600080fd5b81356105fe816105c9565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561064457610644610605565b604052919050565b6000602080838503121561065f57600080fd5b823567ffffffffffffffff8082111561067757600080fd5b818501915085601f83011261068b57600080fd5b81358181111561069d5761069d610605565b8060051b91506106ae84830161061b565b81815291830184019184810190888411156106c857600080fd5b938501935b838510156106f257843592506106e2836105c9565b82825293850193908501906106cd565b98975050505050505050565b600060c0828403121561071057600080fd5b60405160c0810167ffffffffffffffff828210818311171561073457610734610605565b8160405284359150610745826105c9565b908252602084013590610757826105c9565b81602084015260408501356040840152606085013560608401526080850135608084015260a08501359150808216821461079057600080fd5b5060a08201529392505050565b600080604083850312156107b057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036107fc57634e487b7160e01b600052601160045260246000fd5b6001019392505050565b60006020828403121561081857600080fd5b81516105fe816105c956fea2646970667358221220d66cc0b0dfa62294d07ee400741c908c0a7f4584570ad872373892e04754321164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchRaffleDrawnTickets(address[])": {
        "params": {
          "_raffleContracts": "the array of raffle addresses to call drawnTickets()"
        }
      },
      "createNewRaffle((address,address,uint256,uint256,uint256,uint64))": {
        "details": "must transfer the nft to the contract before initialize()",
        "params": {
          "_params": "used for initialization (see Params struct in RaffleFactory.sol)"
        },
        "returns": {
          "newRaffle": "the instance of the raffle contract"
        }
      },
      "randomProvider()": {
        "returns": {
          "_0": "The address of the randomProvider contract"
        }
      }
    },
    "stateVariables": {
      "isRegisteredRaffle": {
        "params": {
          "_raffleAddress": "the address to check"
        },
        "return": "bool is true if it's a raffle deployed by this factory, false otherwise",
        "returns": {
          "_0": "bool is true if it's a raffle deployed by this factory, false otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchRaffleDrawnTickets(address[])": {
        "notice": "call by batch drawnTickets() for each raffleContract passed"
      },
      "createNewRaffle((address,address,uint256,uint256,uint256,uint64))": {
        "notice": "Deploy a new raffle contract"
      },
      "isRegisteredRaffle(address)": {
        "notice": "Return if the address is a raffle deployed by this factory"
      },
      "randomProvider()": {
        "notice": "get the randomProvider contract address from the implementationManager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6063,
        "contract": "src/raffle/RaffleFactory.sol:RaffleFactory",
        "label": "isRegisteredRaffle",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6068,
        "contract": "src/raffle/RaffleFactory.sol:RaffleFactory",
        "label": "requestIdToContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}