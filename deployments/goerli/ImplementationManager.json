{
  "address": "0x157d5673250BfD323Bdc6161C6dF767b8E6cC567",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IMPLEMENTATION_NOT_FOUND",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_MAINTAINER",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "interfaceName",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementationAddress",
          "type": "address"
        }
      ],
      "name": "InterfaceImplementationChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "implementationAddress",
          "type": "address"
        }
      ],
      "name": "changeImplementationAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceName",
          "type": "bytes32"
        }
      ],
      "name": "getImplementationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "implementationAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "interfacesImplemented",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43b6e2e34c37639ae64d7080b59721d387bdfbdcca6474101efb22f6c8b71d0d",
  "receipt": {
    "to": null,
    "from": "0x94e1EBc6464Ff4c0043fF4dD2b8941c655681C44",
    "contractAddress": "0x157d5673250BfD323Bdc6161C6dF767b8E6cC567",
    "transactionIndex": 18,
    "gasUsed": "259878",
    "logsBloom": "0x
    "blockHash": "0xd1938fe274455817aa9f004bfbb03e62df5a46afe89543010b7effc70dad3264",
    "transactionHash": "0x43b6e2e34c37639ae64d7080b59721d387bdfbdcca6474101efb22f6c8b71d0d",
    "logs": [],
    "blockNumber": 8439715,
    "cumulativeGasUsed": "7056414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x406715D872D2EDa885d41aEd2111fb5693F85460"
  ],
  "numDeployments": 1,
  "solcInputHash": "067c2199af124fad4e84c1970512a6da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION_NOT_FOUND\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_MAINTAINER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"interfaceName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"InterfaceImplementationChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"changeImplementationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceName\",\"type\":\"bytes32\"}],\"name\":\"getImplementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"interfacesImplemented\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeImplementationAddress(bytes32,address)\":{\"params\":{\"implementationAddress\":\"address of the deployed contract that implements the interface.\",\"interfaceName\":\"bytes32 encoding of the interface name that is either changed or registered.\"}},\"getImplementationAddress(bytes32)\":{\"params\":{\"interfaceName\":\"queried interface.\"},\"returns\":{\"implementationAddress\":\"Address of the deployed contract that implements the interface.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeImplementationAddress(bytes32,address)\":{\"notice\":\"Updates the address of the contract that implements `interfaceName`.\"},\"getImplementationAddress(bytes32)\":{\"notice\":\"Gets the address of the contract that implements the given `interfaceName`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/ImplementationManager.sol\":\"ImplementationManager\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735363136353233393536\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"src/core/ImplementationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IAccessController} from \\\"../interfaces/IAccessController.sol\\\";\\nimport {IImplementationManager} from \\\"../interfaces/IImplementationManager.sol\\\";\\n\\nimport {ImplementationInterfaceNames} from \\\"../libraries/helpers/ImplementationInterfaceNames.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\ncontract ImplementationManager is IImplementationManager{\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => address) public interfacesImplemented;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event InterfaceImplementationChanged(\\n      bytes32 indexed interfaceName,\\n      address indexed newImplementationAddress\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n      IAccessController accessController = IAccessController(interfacesImplemented[ImplementationInterfaceNames.AccessController]);\\n      if(!accessController.hasRole(accessController.MAINTAINER_ROLE(), msg.sender)) revert Errors.NOT_MAINTAINER();\\n      _;\\n  }\\n\\n  //----------------------------------------\\n  // Initialization function\\n  //----------------------------------------\\n  constructor(address _accessController) {\\n      interfacesImplemented[ImplementationInterfaceNames.AccessController] = _accessController;\\n  }\\n\\n  //----------------------------------------\\n  // Externals functions\\n  //----------------------------------------\\n\\n  /// @inheritdoc IImplementationManager\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external override onlyMaintainer {\\n    interfacesImplemented[interfaceName] = implementationAddress;\\n\\n    emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n  }\\n\\n  /// @inheritdoc IImplementationManager\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    override\\n    returns (address implementationAddress)\\n  {\\n    implementationAddress = interfacesImplemented[interfaceName];\\n    if(implementationAddress == address(0x0)) revert Errors.IMPLEMENTATION_NOT_FOUND();\\n  }\\n\\n}\",\"keccak256\":\"0xf0b38c71e3f324e571befca3183f354d4d11285e9a056fc9f52d0743abf54b3a\",\"license\":\"MIT\"},\"src/interfaces/IAccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IAccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessController is IAccessControl {\\n  function MAINTAINER_ROLE() external view returns (bytes32);\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n}\",\"keccak256\":\"0xd0b3c763ebdc8a64694959d9b799e401b1b791d1f6a4edb62764900a22b570c3\",\"license\":\"MIT\"},\"src/interfaces/IImplementationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IImplementationManager{\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(\\n        bytes32 interfaceName,\\n        address implementationAddress\\n    ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address implementationAddress);\\n\\n}\",\"keccak256\":\"0x77bef3e7ed09382acfe4011fdc7371857e6bd0b44b83c1534380cd5b9b29702e\",\"license\":\"MIT\"},\"src/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the protocol\\n */\\nlibrary Errors {\\n    error BE_ADDRESS_0(); // 'Address must be address(0)'\\n    error NOT_ADDRESS_0(); // 'Address must not be address(0)'\\n    error RAFFLE_CLOSE(); // 'Current timestamps greater or equal than the close time'\\n    error RAFFLE_STILL_OPEN(); // 'Current timestamps lesser or equal than the close time'\\n    error CANT_BE_ZERO(); // 'Value can't must be higher than 0'\\n    error MAX_TICKET_SUPPLY_EXCEEDED(); // 'Maximum amount of ticket sold for the raffle has been reached'\\n    error NOT_ENOUGH_BALANCE(); // 'Balance lower than required'\\n    error MSG_SENDER_NOT_WINNER(); // 'msg.sender is not winner address'\\n    error NOT_CREATOR(); // 'msg.sender is not the creator of the raffle'\\n    error TICKET_NOT_DRAWN(); // 'ticket must be drawn'\\n    error TICKET_ALREADY_DRAWN(); // 'ticket has already be drawn'\\n    error NOT_MAINTAINER(); // 'Caller is not the maintainer'\\n    error IMPLEMENTATION_NOT_FOUND(); // 'Implementation interfaces is not registered'\\n}\\n\\n \",\"keccak256\":\"0x6cc7ca88848c2452afbf0b57160efdf8289cad985bcf369efe599c2bcc3cadd3\",\"license\":\"MIT\"},\"src/libraries/helpers/ImplementationInterfaceNames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary ImplementationInterfaceNames {\\n  bytes32 public constant AccessController = 'AccessController';\\n}\\n\",\"keccak256\":\"0xa88dbe80d962115ad66d007f530ddf6713a9d612f77259293681404bca55810a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161041538038061041583398101604081905261002f9161008f565b6f20b1b1b2b9b9a1b7b73a3937b63632b960811b60009081526020527f5542d27f97c119ca499c404ca78083b3b2fa2b515dc902c5208a81c22feaac3d80546001600160a01b0319166001600160a01b03929092169190911790556100bf565b6000602082840312156100a157600080fd5b81516001600160a01b03811681146100b857600080fd5b9392505050565b610347806100ce6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806331f9665e14610046578063aafd5e401461005b578063cc48f4db1461008a575b600080fd5b61005961005436600461027a565b6100b3565b005b61006e6100693660046102b6565b61023f565b6040516001600160a01b03909116815260200160405180910390f35b61006e6100983660046102b6565b6000602081905290815260409020546001600160a01b031681565b6f20b1b1b2b9b9a1b7b73a3937b63632b960811b600090815260209081527f5542d27f97c119ca499c404ca78083b3b2fa2b515dc902c5208a81c22feaac3d5460408051633e1d089560e21b815290516001600160a01b039092169283926391d1485492849263f8742254926004808401938290030181865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016291906102cf565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156101a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c891906102e8565b6101e5576040516337ab45b760e01b815260040160405180910390fd5b60008381526020819052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917fb29aa13e555039289e0513962835b00fcc6e4a265ae8f99e68e5b90d5406fe489190a3505050565b6000818152602081905260409020546001600160a01b031680610275576040516320a03dc760e01b815260040160405180910390fd5b919050565b6000806040838503121561028d57600080fd5b8235915060208301356001600160a01b03811681146102ab57600080fd5b809150509250929050565b6000602082840312156102c857600080fd5b5035919050565b6000602082840312156102e157600080fd5b5051919050565b6000602082840312156102fa57600080fd5b8151801515811461030a57600080fd5b939250505056fea26469706673582212200ce822ca5ed53ee76a9afca585b2331fe5a3ab46270fa7bd56e1dd887f4bc2de64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806331f9665e14610046578063aafd5e401461005b578063cc48f4db1461008a575b600080fd5b61005961005436600461027a565b6100b3565b005b61006e6100693660046102b6565b61023f565b6040516001600160a01b03909116815260200160405180910390f35b61006e6100983660046102b6565b6000602081905290815260409020546001600160a01b031681565b6f20b1b1b2b9b9a1b7b73a3937b63632b960811b600090815260209081527f5542d27f97c119ca499c404ca78083b3b2fa2b515dc902c5208a81c22feaac3d5460408051633e1d089560e21b815290516001600160a01b039092169283926391d1485492849263f8742254926004808401938290030181865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016291906102cf565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156101a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c891906102e8565b6101e5576040516337ab45b760e01b815260040160405180910390fd5b60008381526020819052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917fb29aa13e555039289e0513962835b00fcc6e4a265ae8f99e68e5b90d5406fe489190a3505050565b6000818152602081905260409020546001600160a01b031680610275576040516320a03dc760e01b815260040160405180910390fd5b919050565b6000806040838503121561028d57600080fd5b8235915060208301356001600160a01b03811681146102ab57600080fd5b809150509250929050565b6000602082840312156102c857600080fd5b5035919050565b6000602082840312156102e157600080fd5b5051919050565b6000602082840312156102fa57600080fd5b8151801515811461030a57600080fd5b939250505056fea26469706673582212200ce822ca5ed53ee76a9afca585b2331fe5a3ab46270fa7bd56e1dd887f4bc2de64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeImplementationAddress(bytes32,address)": {
        "params": {
          "implementationAddress": "address of the deployed contract that implements the interface.",
          "interfaceName": "bytes32 encoding of the interface name that is either changed or registered."
        }
      },
      "getImplementationAddress(bytes32)": {
        "params": {
          "interfaceName": "queried interface."
        },
        "returns": {
          "implementationAddress": "Address of the deployed contract that implements the interface."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeImplementationAddress(bytes32,address)": {
        "notice": "Updates the address of the contract that implements `interfaceName`."
      },
      "getImplementationAddress(bytes32)": {
        "notice": "Gets the address of the contract that implements the given `interfaceName`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3985,
        "contract": "src/core/ImplementationManager.sol:ImplementationManager",
        "label": "interfacesImplemented",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}