/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenWhitelist,
  TokenWhitelistInterface,
} from "../../../src/core/TokenWhitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IImplementationManager",
        name: "_implementationManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NOT_MAINTAINER",
    type: "error",
  },
  {
    inputs: [],
    name: "TOKEN_ALREADY_WHITELISTED",
    type: "error",
  },
  {
    inputs: [],
    name: "TOKEN_NOT_WHITELISTED",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addedToken",
        type: "address",
      },
    ],
    name: "AddedToWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "removedToken",
        type: "address",
      },
    ],
    name: "RemovedFromWhitelist",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newToken",
        type: "address",
      },
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getWhitelist",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementationManager",
    outputs: [
      {
        internalType: "contract IImplementationManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToCheck",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToRemove",
        type: "address",
      },
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161095038038061095083398101604081905261002f91610054565b600280546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6108bd806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632bafa11b1461005c5780633af32abf1461008c5780638ab1d681146100af578063d01f63f5146100c4578063e43252d7146100d9575b600080fd5b60025461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61009a366004610741565b6100ec565b6040519015158152602001610083565b6100c26100bd366004610741565b6100fe565b005b6100cc6102d4565b604051610083919061075e565b6100c26100e7366004610741565b610382565b60006100f88183610558565b92915050565b6002546040516302abf57960e61b81526f20b1b1b2b9b9a1b7b73a3937b63632b960811b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e91906107ab565b9050806001600160a01b03166391d14854826001600160a01b031663f87422546040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f191906107c8565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025791906107e1565b610274576040516337ab45b760e01b815260040160405180910390fd5b61027f60008361057d565b61029c576040516322f1315360e21b815260040160405180910390fd5b6040516001600160a01b038316907fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df75790600090a25050565b606060006102e26000610592565b905060008167ffffffffffffffff8111156102ff576102ff610803565b604051908082528060200260200182016040528015610328578160200160208202803683370190505b50905060005b8281101561037b5761034160008261059c565b82828151811061035357610353610819565b6001600160a01b039092166020928302919091019091015261037481610845565b905061032e565b5092915050565b6002546040516302abf57960e61b81526f20b1b1b2b9b9a1b7b73a3937b63632b960811b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa1580156103de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040291906107ab565b9050806001600160a01b03166391d14854826001600160a01b031663f87422546040518163ffffffff1660e01b8152600401602060405180830381865afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047591906107c8565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906107e1565b6104f8576040516337ab45b760e01b815260040160405180910390fd5b6105036000836105a8565b61052057604051636d2a6c4160e01b815260040160405180910390fd5b6040516001600160a01b038316907fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab0390600090a25050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000610576836001600160a01b0384166105bd565b60006100f8825490565b600061057683836106b0565b6000610576836001600160a01b0384166106da565b600081815260018301602052604081205480156106a65760006105e160018361085e565b85549091506000906105f59060019061085e565b905081811461065a57600086600001828154811061061557610615610819565b906000526020600020015490508087600001848154811061063857610638610819565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061066b5761066b610871565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506100f8565b60009150506100f8565b60008260000182815481106106c7576106c7610819565b9060005260206000200154905092915050565b6000818152600183016020526040812054610721575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556100f8565b5060006100f8565b6001600160a01b038116811461073e57600080fd5b50565b60006020828403121561075357600080fd5b813561057681610729565b6020808252825182820181905260009190848201906040850190845b8181101561079f5783516001600160a01b03168352928401929184019160010161077a565b50909695505050505050565b6000602082840312156107bd57600080fd5b815161057681610729565b6000602082840312156107da57600080fd5b5051919050565b6000602082840312156107f357600080fd5b8151801515811461057657600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016108575761085761082f565b5060010190565b818103818111156100f8576100f861082f565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209a16c607c589db53fb4fe6e477054ce42e7e08b78fe1e338e708af7334a8ddd464736f6c63430008110033";

type TokenWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenWhitelist__factory extends ContractFactory {
  constructor(...args: TokenWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _implementationManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenWhitelist> {
    return super.deploy(
      _implementationManager,
      overrides || {}
    ) as Promise<TokenWhitelist>;
  }
  override getDeployTransaction(
    _implementationManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_implementationManager, overrides || {});
  }
  override attach(address: string): TokenWhitelist {
    return super.attach(address) as TokenWhitelist;
  }
  override connect(signer: Signer): TokenWhitelist__factory {
    return super.connect(signer) as TokenWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenWhitelistInterface {
    return new utils.Interface(_abi) as TokenWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenWhitelist {
    return new Contract(address, _abi, signerOrProvider) as TokenWhitelist;
  }
}
