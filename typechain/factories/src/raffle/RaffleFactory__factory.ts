/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RaffleFactory,
  RaffleFactoryInterface,
} from "../../../src/raffle/RaffleFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IImplementationManager",
        name: "_implementationManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "purchaseCurrency",
            type: "address",
          },
          {
            internalType: "contract IERC721",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTicketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "ticketSaleDuration",
            type: "uint64",
          },
        ],
        indexed: false,
        internalType: "struct IRaffleFactory.Params",
        name: "globalData",
        type: "tuple",
      },
    ],
    name: "NewRaffle",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_raffleContracts",
        type: "address[]",
      },
    ],
    name: "batchRaffleDrawnTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "purchaseCurrency",
            type: "address",
          },
          {
            internalType: "contract IERC721",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTicketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "ticketSaleDuration",
            type: "uint64",
          },
        ],
        internalType: "struct IRaffleFactory.Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "createNewRaffle",
    outputs: [
      {
        internalType: "contract Raffle",
        name: "newRaffle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isRegisteredRaffle",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestIdToContracts",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051611d66380380611d6683398101604081905261002f91610084565b6001600160a01b03811660805260405161004890610077565b604051809103906000f080158015610064573d6000803e3d6000fd5b506001600160a01b031660a052506100b4565b6115058061086183390190565b60006020828403121561009657600080fd5b81516001600160a01b03811681146100ad57600080fd5b9392505050565b60805160a0516107886100d9600039600061017c0152600061028a01526107886000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806333a01c2b14610051578063447742921461008957806381a4d1421461009e578063da053d8f146100c9575b600080fd5b61007461005f36600461052d565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61009c610097366004610598565b6100dc565b005b6100b16100ac36600461064a565b610175565b6040516001600160a01b039091168152602001610080565b6100b16100d73660046106e9565b61043f565b60005b81518163ffffffff16101561017157818163ffffffff16815181106101065761010661070b565b60200260200101516001600160a01b031663413c5f726040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561014857600080fd5b505af115801561015c573d6000803e3d6000fd5b505050508061016a90610721565b90506100df565b5050565b60006101a97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610477565b602083015160408085015190516323b872dd60e01b81523360048201526001600160a01b038085166024830152604482019290925292935016906323b872dd90606401600060405180830381600087803b15801561020657600080fd5b505af115801561021a573d6000803e3d6000fd5b50505050806001600160a01b0316634d1d30316102f284604080516101008082018352600080835260208084018290528385018290526060808501839052608080860184905260a080870185905260c080880186905260e097880195909552875195860188526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811687528951811687860152938901519093168588015233858301529587015184870152860151838201529385015190820152929091015167ffffffffffffffff169082015290565b6040805160e084811b6001600160e01b031916825283516001600160a01b0390811660048401526020850151811660248401529284015183166044830152606084015190921660648201526080830151608482015260a083015160a482015260c083015160c482015291015167ffffffffffffffff1660e482015261010401600060405180830381600087803b15801561038b57600080fd5b505af115801561039f573d6000803e3d6000fd5b505050506001600160a01b0381811660008181526020818152604091829020805460ff19166001179055815186518516815286820151909416908401528481015190830152606080850151908301526080808501519083015260a08085015167ffffffffffffffff1690830152907f6ad154c6e4272962da2be5932717cfce555489673cee99d99cfbd1c9742b3f859060c00160405180910390a2919050565b6001602052816000526040600020818154811061045b57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166105105760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b6001600160a01b038116811461052a57600080fd5b50565b60006020828403121561053f57600080fd5b813561054a81610515565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561059057610590610551565b604052919050565b600060208083850312156105ab57600080fd5b823567ffffffffffffffff808211156105c357600080fd5b818501915085601f8301126105d757600080fd5b8135818111156105e9576105e9610551565b8060051b91506105fa848301610567565b818152918301840191848101908884111561061457600080fd5b938501935b8385101561063e578435925061062e83610515565b8282529385019390850190610619565b98975050505050505050565b600060c0828403121561065c57600080fd5b60405160c0810167ffffffffffffffff828210818311171561068057610680610551565b816040528435915061069182610515565b9082526020840135906106a382610515565b81602084015260408501356040840152606085013560608401526080850135608084015260a0850135915080821682146106dc57600080fd5b5060a08201529392505050565b600080604083850312156106fc57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff80831681810361074857634e487b7160e01b600052601160045260246000fd5b600101939250505056fea26469706673582212209533c64918b176076845a18565a25983c4c2e14cb59c6e6ec1cba84deb61228964736f6c63430008110033608060405234801561001057600080fd5b506114e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636a4a5b2d116100ad578063cb784b4d11610071578063cb784b4d1461024a578063ccfa213e1461025d578063cf6622ab14610277578063d5abeb0114610292578063ed7a4e0b1461029a57600080fd5b80636a4a5b2d146101f657806370a08231146102075780638f46500e14610227578063a12776001461022f578063c26eea541461024257600080fd5b80633b398ff8116100f45780633b398ff814610174578063413c5f72146101aa5780634d1d3031146101b25780636352211e146101c5578063636ed74c146101ee57600080fd5b806302d05d3f146101265780631209b1f61461015057806315d655c91461016257806318160ddd1461016c575b600080fd5b6003546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b600a545b604051908152602001610147565b61016a6102a2565b005b600954610154565b61018b6006546007546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610147565b61016a6103fe565b61016a6101c0366004611187565b6104f3565b6101336101d336600461123b565b6000908152600160205260409020546001600160a01b031690565b61016a6106af565b6004546001600160a01b0316610133565b61021a610215366004611254565b61086c565b6040516101479190611278565b6101336108d8565b61016a61023d36600461123b565b61095b565b610154610c17565b61016a6102583660046112bc565b610c99565b600c54600160401b900460ff166040516101479190611377565b600c546040516001600160401b039091168152602001610147565b600854610154565b610133610dce565b600c546001600160401b03164210156102ce57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156102ee576102ee611361565b1461030c576040516316de234960e11b815260040160405180910390fd5b610314610dce565b6001600160a01b0316336001600160a01b0316146103455760405163b4e5b12160e01b815260040160405180910390fd5b600654600754604051632142170760e11b815230600482015233602482015260448101919091526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b50506006546007546040519081526001600160a01b03909116925033915030907f1fc6b0218aceb86978fcfee181f91a4a3f28d1eddff4e6df0c3dc99c79ace6d49060200160405180910390a4565b600c546001600160401b031642101561042a57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff16600281111561044a5761044a611361565b0361046857604051630a7f733d60e41b815260040160405180910390fd5b600c805460ff60401b1916600160401b1790556104836108d8565b604051633b82d3fb60e11b8152600160048201526001600160a01b039190911690637705a7f6906024016020604051808303816000875af11580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f0919061139f565b50565b600054610100900460ff16158080156105135750600054600160ff909116105b8061052d5750303b15801561052d575060005460ff166001145b6105945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156105b7576000805461ff0019166101001790555b6105c082610e68565b8151600580546001600160a01b039283166001600160a01b031991821617909155606084015160038054918416918316919091179055602084015160048054918416918316919091179055604084015160068054919093169116179055608082015160075560a082015160085560c0820151600a5560e082015161064490426113ce565b600c805467ffffffffffffffff19166001600160401b039290921691909117905580156106ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600c546001600160401b03164210156106db57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156106fb576106fb611361565b14610719576040516316de234960e11b815260040160405180910390fd5b6003546001600160a01b0316331461074457604051632cff942760e01b815260040160405180910390fd5b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b6919061139f565b6004805460405163a9059cbb60e01b81523392810192909252602482018390529192506001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561080d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083191906113f5565b50604051818152339030907f2427926a2340a250197c73c9c1a12ca71ee0f1f53f8e08badda42770afc6ecf69060200160405180910390a350565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156108cc57602002820191906000526020600020905b8154815260200190600101908083116108b8575b50505050509050919050565b6005546040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190611417565b905090565b600c546001600160401b031642106109865760405163377d0b8560e11b815260040160405180910390fd5b806000036109a7576040516398fccb2760e01b815260040160405180910390fd5b600854816109b460095490565b6109be9190611434565b11156109dd576040516384bfcb9560e01b815260040160405180910390fd5b600480546040516370a0823160e01b815233928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a919061139f565b610a53826110ee565b1115610a725760405163119563e560e31b815260040160405180910390fd5b6004546001600160a01b03166323b872dd3330610a8e856110ee565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0691906113f5565b503360009081526002602052604081206009549091836001600160401b03811115610b3357610b33611105565b604051908082528060200260200182016040528015610b5c578160200160208202803683370190505b50905060005b84811015610bcf57610b7383611447565b925082828281518110610b8857610b88611460565b6020908102919091018101919091528454600181810187556000878152838120909201869055858252918290526040902080546001600160a01b0319163317905501610b62565b506009829055604051339030907f3298f998adc3ec4bdcc9bb12f2a924f1d28c61596124855d7d6d4d09e231847a90610c09908590611278565b60405180910390a350505050565b6000610c2b600c546001600160401b031690565b6001600160401b0316421015610c5457604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610c7457610c74611361565b14610c92576040516316de234960e11b815260040160405180910390fd5b50600b5490565b33610ca26108d8565b6001600160a01b031614610cc95760405163170cd40b60e31b815260040160405180910390fd5b6001600c54600160401b900460ff166002811115610ce957610ce9611361565b14610d07576040516345a4ca3b60e11b815260040160405180910390fd5b80600081518110610d1a57610d1a611460565b60200260200101516000148015610d3057508051155b15610d4357600c805460ff60401b191690555b60036006015481600081518110610d5c57610d5c611460565b6020026020010151610d6e9190611476565b610d79906001611434565b600b819055600c805460ff60401b191668020000000000000000179055604080519182525130917fbd2ef7d8e723142e22eed26d859400cda0ac602edacddc8b13f96c921011a9ac919081900360200190a250565b6000610de2600c546001600160401b031690565b6001600160401b0316421015610e0b57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610e2b57610e2b611361565b14610e49576040516316de234960e11b815260040160405180910390fd5b50600b546000908152600160205260409020546001600160a01b031690565b80516001600160a01b0316610e9057604051639f34e01960e01b815260040160405180910390fd5b60208101516001600160a01b0316610ebb57604051639f34e01960e01b815260040160405180910390fd5b80516040516302abf57960e61b81526b13919515da1a5d195b1a5cdd60a21b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190611417565b6040838101519051633af32abf60e01b81526001600160a01b039182166004820152919250821690633af32abf90602401602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906113f5565b610fc557604051636191047560e11b815260040160405180910390fd5b306001600160a01b031682604001516001600160a01b0316636352211e84608001516040518263ffffffff1660e01b815260040161100591815260200190565b602060405180830381865afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190611417565b6001600160a01b03161461106d57604051637bed417b60e01b815260040160405180910390fd5b8160c00151600003611092576040516398fccb2760e01b815260040160405180910390fd5b8160a001516000036110b7576040516398fccb2760e01b815260040160405180910390fd5b6201518063ffffffff168260e001516001600160401b031610156106ab576040516351ec70cd60e11b815260040160405180910390fd5b600a546000906110ff908390611498565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561114357611143611105565b604052919050565b6001600160a01b03811681146104f057600080fd5b803561116b8161114b565b919050565b80356001600160401b038116811461116b57600080fd5b600061010080838503121561119b57600080fd5b604051908101906001600160401b03821181831017156111bd576111bd611105565b81604052833591506111ce8261114b565b8181526111dd60208501611160565b60208201526111ee60408501611160565b60408201526111ff60608501611160565b60608201526080840135608082015260a084013560a082015260c084013560c082015261122e60e08501611170565b60e0820152949350505050565b60006020828403121561124d57600080fd5b5035919050565b60006020828403121561126657600080fd5b81356112718161114b565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156112b057835183529284019291840191600101611294565b50909695505050505050565b600060208083850312156112cf57600080fd5b82356001600160401b03808211156112e657600080fd5b818501915085601f8301126112fa57600080fd5b81358181111561130c5761130c611105565b8060051b915061131d84830161111b565b818152918301840191848101908884111561133757600080fd5b938501935b838510156113555784358252938501939085019061133c565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061139957634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156113b157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b038181168382160190808211156113ee576113ee6113b8565b5092915050565b60006020828403121561140757600080fd5b8151801515811461127157600080fd5b60006020828403121561142957600080fd5b81516112718161114b565b808201808211156110ff576110ff6113b8565b600060018201611459576114596113b8565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008261149357634e487b7160e01b600052601260045260246000fd5b500690565b80820281158282048414176110ff576110ff6113b856fea26469706673582212206930b7c26dd3cf59c2656414d53e3ad819fa9e416eb19d858b7fec102d21009264736f6c63430008110033";

type RaffleFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RaffleFactory__factory extends ContractFactory {
  constructor(...args: RaffleFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _implementationManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RaffleFactory> {
    return super.deploy(
      _implementationManager,
      overrides || {}
    ) as Promise<RaffleFactory>;
  }
  override getDeployTransaction(
    _implementationManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_implementationManager, overrides || {});
  }
  override attach(address: string): RaffleFactory {
    return super.attach(address) as RaffleFactory;
  }
  override connect(signer: Signer): RaffleFactory__factory {
    return super.connect(signer) as RaffleFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleFactoryInterface {
    return new utils.Interface(_abi) as RaffleFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RaffleFactory {
    return new Contract(address, _abi, signerOrProvider) as RaffleFactory;
  }
}
