/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Raffle, RaffleInterface } from "../../../src/raffle/Raffle";

const _abi = [
  {
    inputs: [],
    name: "CANT_BE_ZERO",
    type: "error",
  },
  {
    inputs: [],
    name: "MAX_TICKET_SUPPLY_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "MSG_SENDER_NOT_WINNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_CREATOR",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ENOUGH_BALANCE",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_RANDOM_PROVIDER_CONTRACT",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_CLOSE",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_STILL_OPEN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_ALREADY_DRAWN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_NOT_DRAWN",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountReceived",
        type: "uint256",
      },
    ],
    name: "CreatorClaimTicketSalesAmount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "purchaseCurrency",
            type: "address",
          },
          {
            internalType: "contract IImplementationManager",
            name: "implementationManager",
            type: "address",
          },
          {
            internalType: "contract IERC721",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTicketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "winningTicketNumber",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "endTime",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "isTicketDrawn",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct RaffleDataTypes.RaffleData",
        name: "globalData",
        type: "tuple",
      },
    ],
    name: "NewRaffle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ticketNumbers",
        type: "uint256[]",
      },
    ],
    name: "TicketPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "WinnerClaimedPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "winningTicket",
        type: "uint256",
      },
    ],
    name: "WinningTicketDrawned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimTicketSalesAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "creator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drawnRandomTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "randomNumber",
        type: "uint256",
      },
    ],
    name: "drawnTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IImplementationManager",
            name: "implementationManager",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "purchaseCurrency",
            type: "address",
          },
          {
            internalType: "contract IERC721",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTicketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "endTime",
            type: "uint64",
          },
        ],
        internalType: "struct RaffleDataTypes.InitRaffleParams",
        name: "_data",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isTicketDrawn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftToWin",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "nftContractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purchaseCurrency",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nbOfTickets",
        type: "uint256",
      },
    ],
    name: "purchaseTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningTicket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506111d8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636352211e116100a257806387409f3c1161007157806387409f3c14610254578063a127760014610267578063c26eea541461027a578063d5abeb0114610282578063ed7a4e0b1461028a57600080fd5b80636352211e146101f2578063636ed74c1461021b5780636a4a5b2d1461022357806370a082311461023457600080fd5b8063237be938116100e9578063237be938146101695780633197cbb61461017c57806332095a66146101975780633b398ff8146101b45780635e4aaae8146101ea57600080fd5b806302d05d3f1461011b5780631209b1f61461014557806315d655c91461015757806318160ddd14610161575b600080fd5b6002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6009545b60405190815260200161013c565b61015f610292565b005b600854610149565b61015f610177366004610ee2565b6103da565b600b546040516001600160401b03909116815260200161013c565b600b54600160401b900460ff16604051901515815260200161013c565b6101cb6005546006546001600160a01b0390911691565b604080516001600160a01b03909316835260208301919091520161013c565b61015f61062d565b610128610200366004610f8a565b6000908152602081905260409020546001600160a01b031690565b61015f610756565b6003546001600160a01b0316610128565b610247610242366004610fa3565b6108f5565b60405161013c9190610fc7565b61015f610262366004610f8a565b610961565b61015f610275366004610f8a565b610aea565b610149610d9e565b600754610149565b610128610dfe565b600b546001600160401b03164210156102be57604051630c2695bf60e11b815260040160405180910390fd5b600b54600160401b900460ff166102e8576040516316de234960e11b815260040160405180910390fd5b6102f0610dfe565b6001600160a01b0316336001600160a01b0316146103215760405163b4e5b12160e01b815260040160405180910390fd5b600554600654604051632142170760e11b815230600482015233602482015260448101919091526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b50506005546006546040519081526001600160a01b03909116925033915030907f1fc6b0218aceb86978fcfee181f91a4a3f28d1eddff4e6df0c3dc99c79ace6d49060200160405180910390a4565b600c54610100900460ff16158080156103fa5750600c54600160ff909116105b806104145750303b1580156104145750600c5460ff166001145b61047b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600c805460ff19166001179055801561049e57600c805461ff0019166101001790555b604080830151606084015191516323b872dd60e01b815233600482015230602482015260448101929092526001600160a01b0316906323b872dd90606401600060405180830381600087803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b50508351600480546001600160a01b039283166001600160a01b0319918216179091556002805482163317905560208601516003805491841691831691909117905560408601516005805491909316911617905550506060820151600655608082015160075560a082015160095560c08201516105879042611021565b600b805467ffffffffffffffff19166001600160401b039290921691909117905560405130907f8e6ed988ca4466debd93187a712a711d162a86afc40acfc588c00ef76509fa7c906105db90600290611048565b60405180910390a2801561062957600c805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600b546001600160401b031642101561065957604051630c2695bf60e11b815260040160405180910390fd5b600b54600160401b900460ff161561068457604051630a7f733d60e41b815260040160405180910390fd5b600480546040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b928101929092526001600160a01b03169063aafd5e4090602401602060405180830381865afa1580156106de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070291906110e8565b6001600160a01b0316638678a7b26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561073c57600080fd5b505af1158015610750573d6000803e3d6000fd5b50505050565b600b546001600160401b031642101561078257604051630c2695bf60e11b815260040160405180910390fd5b600b54600160401b900460ff166107ac576040516316de234960e11b815260040160405180910390fd5b6002546001600160a01b031633146107d757604051632cff942760e01b815260040160405180910390fd5b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611105565b60035460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba919061111e565b50604051818152339030907f2427926a2340a250197c73c9c1a12ca71ee0f1f53f8e08badda42770afc6ecf69060200160405180910390a350565b6001600160a01b03811660009081526001602090815260409182902080548351818402810184019094528084526060939283018282801561095557602002820191906000526020600020905b815481526020019060010190808311610941575b50505050509050919050565b600b546001600160401b031642101561098d57604051630c2695bf60e11b815260040160405180910390fd5b600b54600160401b900460ff16156109b857604051630a7f733d60e41b815260040160405180910390fd5b600480546040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b9281019290925233916001600160a01b039091169063aafd5e4090602401602060405180830381865afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a91906110e8565b6001600160a01b031614610a615760405163170cd40b60e31b815260040160405180910390fd5b80600003610a82576040516398fccb2760e01b815260040160405180910390fd5b600854610a8f9082611140565b600a819055600b805468ff00000000000000001916600160401b17905560405130917fbd2ef7d8e723142e22eed26d859400cda0ac602edacddc8b13f96c921011a9ac91610adf91815260200190565b60405180910390a250565b600b546001600160401b03164210610b155760405163377d0b8560e11b815260040160405180910390fd5b80600003610b36576040516398fccb2760e01b815260040160405180910390fd5b60075481610b4360085490565b610b4d9190611162565b1115610b6c576040516384bfcb9560e01b815260040160405180910390fd5b6003546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd89190611105565b610be182610e76565b1115610c005760405163119563e560e31b815260040160405180910390fd5b6003546001600160a01b03166323b872dd3330610c1c85610e76565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c94919061111e565b503360009081526001602052604081206008549091836001600160401b03811115610cc157610cc1610e8d565b604051908082528060200260200182016040528015610cea578160200160208202803683370190505b50905060005b84811015610d565782828281518110610d0b57610d0b611175565b6020908102919091018101919091528454600181810187556000878152838120909201869055858252918190526040902080546001600160a01b031916331790559283019201610cf0565b506008829055604051339030907f3298f998adc3ec4bdcc9bb12f2a924f1d28c61596124855d7d6d4d09e231847a90610d90908590610fc7565b60405180910390a350505050565b600b546000906001600160401b0316421015610dcd57604051630c2695bf60e11b815260040160405180910390fd5b600b54600160401b900460ff16610df7576040516316de234960e11b815260040160405180910390fd5b50600a5490565b600b546000906001600160401b0316421015610e2d57604051630c2695bf60e11b815260040160405180910390fd5b600b54600160401b900460ff16610e57576040516316de234960e11b815260040160405180910390fd5b50600a546000908152602081905260409020546001600160a01b031690565b600954600090610e8790839061118b565b92915050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610eb857600080fd5b50565b8035610ec681610ea3565b919050565b80356001600160401b0381168114610ec657600080fd5b600060e08284031215610ef457600080fd5b60405160e081018181106001600160401b0382111715610f2457634e487b7160e01b600052604160045260246000fd5b604052610f3083610ebb565b8152610f3e60208401610ebb565b6020820152610f4f60408401610ebb565b6040820152606083013560608201526080830135608082015260a083013560a0820152610f7e60c08401610ecb565b60c08201529392505050565b600060208284031215610f9c57600080fd5b5035919050565b600060208284031215610fb557600080fd5b8135610fc081610ea3565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610fff57835183529284019291840191600101610fe3565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b038181168382160190808211156110415761104161100b565b5092915050565b81546001600160a01b03168152610160810160018301546001600160a01b039081166020840152600284015481166040808501919091526003850154909116606084015260048401546080840152600584015460a0840152600684015460c0840152600784015460e0840152600884015461010084015260098401546001600160401b0381166101208501529081901c60ff161515610140840152611041565b6000602082840312156110fa57600080fd5b8151610fc081610ea3565b60006020828403121561111757600080fd5b5051919050565b60006020828403121561113057600080fd5b81518015158114610fc057600080fd5b60008261115d57634e487b7160e01b600052601260045260246000fd5b500690565b80820180821115610e8757610e8761100b565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610e8757610e8761100b56fea2646970667358221220a33033498c6fdd5fdb0effca4d0089ba1afb5c8caa0d42337040f0ba0eead63464736f6c63430008110033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(overrides || {}) as Promise<Raffle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
