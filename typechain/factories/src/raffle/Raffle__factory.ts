/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Raffle, RaffleInterface } from "../../../src/raffle/Raffle";

const _abi = [
  {
    inputs: [],
    name: "CANT_BE_ZERO",
    type: "error",
  },
  {
    inputs: [],
    name: "COLLECTION_NOT_WHITELISTED",
    type: "error",
  },
  {
    inputs: [],
    name: "EXCEED_MAX_VALUE_ALLOWED",
    type: "error",
  },
  {
    inputs: [],
    name: "MAX_TICKET_SUPPLY_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "MSG_SENDER_NOT_WINNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ADDRESS_0",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_CREATOR",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ENOUGH_BALANCE",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_NFT_OWNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_RANDOM_PROVIDER_CONTRACT",
    type: "error",
  },
  {
    inputs: [],
    name: "OUT_OF_RANGE",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_CLOSE",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_STILL_OPEN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_ALREADY_DRAWN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_DRAWN_NOT_REQUESTED",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_NOT_DRAWN",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "creatorAmountReceived",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "treasuryAmount",
        type: "uint256",
      },
    ],
    name: "CreatorClaimedTicketSalesAmount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ticketNumbers",
        type: "uint256[]",
      },
    ],
    name: "TicketPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "WinnerClaimedPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "winningTicket",
        type: "uint256",
      },
    ],
    name: "WinningTicketDrawned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimTicketSalesAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "creator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drawnTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "randomNumbers",
        type: "uint256[]",
      },
    ],
    name: "drawnTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endTicketSales",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IImplementationManager",
            name: "implementationManager",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "purchaseCurrency",
            type: "address",
          },
          {
            internalType: "contract IERC721",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTicketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "ticketSaleDuration",
            type: "uint64",
          },
        ],
        internalType: "struct RaffleDataTypes.InitRaffleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftToWin",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "nftContractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purchaseCurrency",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nbOfTickets",
        type: "uint256",
      },
    ],
    name: "purchaseTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "raffleStatus",
    outputs: [
      {
        internalType: "enum RaffleDataTypes.RaffleStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "randomProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningTicket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061189e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636a4a5b2d116100ad578063cb784b4d11610071578063cb784b4d1461024a578063ccfa213e1461025d578063cf6622ab14610277578063d5abeb0114610292578063ed7a4e0b1461029a57600080fd5b80636a4a5b2d146101f657806370a08231146102075780638f46500e14610227578063a12776001461022f578063c26eea541461024257600080fd5b80633b398ff8116100f45780633b398ff814610174578063413c5f72146101aa5780634d1d3031146101b25780636352211e146101c5578063636ed74c146101ee57600080fd5b806302d05d3f146101265780631209b1f61461015057806315d655c91461016257806318160ddd1461016c575b600080fd5b6003546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b600a545b604051908152602001610147565b61016a6102a2565b005b600954610154565b61018b6006546007546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610147565b61016a6103fc565b61016a6101c0366004611509565b6104f1565b6101336101d33660046115bd565b6000908152600160205260409020546001600160a01b031690565b61016a6106ad565b6004546001600160a01b0316610133565b61021a6102153660046115d6565b610a64565b60405161014791906115fa565b610133610ad0565b61016a61023d3660046115bd565b610b53565b610154610dff565b61016a61025836600461163e565b610e81565b600c54600160401b900460ff1660405161014791906116f9565b600c546040516001600160401b039091168152602001610147565b600854610154565b610133610fb3565b600c546001600160401b03164210156102ce57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156102ee576102ee6116e3565b1461030c576040516316de234960e11b815260040160405180910390fd5b610314610fb3565b6001600160a01b0316336001600160a01b0316146103455760405163b4e5b12160e01b815260040160405180910390fd5b600654600754604051632142170760e11b815230600482015233602482015260448101919091526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b50506006546007546040519081526001600160a01b0390911692503391507fe41b79bb33c9e589c985af6bc1bb8128c194e86dc8b159c420ac60d700f368e29060200160405180910390a3565b600c546001600160401b031642101561042857604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610448576104486116e3565b0361046657604051630a7f733d60e41b815260040160405180910390fd5b600c805460ff60401b1916600160401b179055610481610ad0565b604051633b82d3fb60e11b8152600160048201526001600160a01b039190911690637705a7f6906024016020604051808303816000875af11580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190611721565b50565b600054610100900460ff16158080156105115750600054600160ff909116105b8061052b5750303b15801561052b575060005460ff166001145b6105925760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156105b5576000805461ff0019166101001790555b6105be8261104d565b8151600580546001600160a01b039283166001600160a01b031991821617909155606084015160038054918416918316919091179055602084015160048054918416918316919091179055604084015160068054919093169116179055608082015160075560a082015160085560c0820151600a5560e08201516106429042611750565b600c805467ffffffffffffffff19166001600160401b039290921691909117905580156106a9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600c546001600160401b03164210156106d957604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156106f9576106f96116e3565b14610717576040516316de234960e11b815260040160405180910390fd5b6003546001600160a01b0316331461074257604051632cff942760e01b815260040160405180910390fd5b6005546040516302abf57960e61b81526c21b7b73334b3a6b0b730b3b2b960991b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190611777565b600480546040516370a0823160e01b815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108329190611721565b905060006108a2836001600160a01b031663a22aa73c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190611721565b839061144a565b905060006108b08284611794565b600480546005546040516302abf57960e61b815267547265617375727960c01b938101939093529293506001600160a01b039081169263a9059cbb9291169063aafd5e4090602401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611777565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa91906117a7565b506004805460405163a9059cbb60e01b81523392810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906117a7565b50604080518281526020810184905233917f97da5ac7096af75aa2298c2994cf033da9f6a71856d4d537aac2058dffa6e8bd91015b60405180910390a250505050565b6001600160a01b038116600090815260026020908152604091829020805483518184028101840190945280845260609392830182828015610ac457602002820191906000526020600020905b815481526020019060010190808311610ab0575b50505050509050919050565b6005546040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e9190611777565b905090565b600c546001600160401b03164210610b7e5760405163377d0b8560e11b815260040160405180910390fd5b80600003610b9f576040516398fccb2760e01b815260040160405180910390fd5b60085481610bac60095490565b610bb691906117c9565b1115610bd5576040516384bfcb9560e01b815260040160405180910390fd5b600480546040516370a0823160e01b815233928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c429190611721565b610c4b82611470565b1115610c6a5760405163119563e560e31b815260040160405180910390fd5b6004546001600160a01b03166323b872dd3330610c8685611470565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe91906117a7565b503360009081526002602052604081206009549091836001600160401b03811115610d2b57610d2b611487565b604051908082528060200260200182016040528015610d54578160200160208202803683370190505b50905060005b84811015610dc757610d6b836117dc565b925082828281518110610d8057610d806117f5565b6020908102919091018101919091528454600181810187556000878152838120909201869055858252918290526040902080546001600160a01b0319163317905501610d5a565b50600982905560405133907f9c33d23af662f3fb15443bf83c7fee6b036d51bb3a68f8b79b5effacd06f586b90610a569084906115fa565b6000610e13600c546001600160401b031690565b6001600160401b0316421015610e3c57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610e5c57610e5c6116e3565b14610e7a576040516316de234960e11b815260040160405180910390fd5b50600b5490565b33610e8a610ad0565b6001600160a01b031614610eb15760405163170cd40b60e31b815260040160405180910390fd5b6001600c54600160401b900460ff166002811115610ed157610ed16116e3565b14610eef576040516345a4ca3b60e11b815260040160405180910390fd5b80600081518110610f0257610f026117f5565b60200260200101516000148015610f1857508051155b15610f2b57600c805460ff60401b191690555b60036006015481600081518110610f4457610f446117f5565b6020026020010151610f56919061180b565b610f619060016117c9565b600b819055600c805460ff60401b19166802000000000000000017905560408051918252517f1d5eb6d3ca99479514ceb30c75cbaf0f426a8b0dfe6819a68eab62baf7fc9fb79181900360200190a150565b6000610fc7600c546001600160401b031690565b6001600160401b0316421015610ff057604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115611010576110106116e3565b1461102e576040516316de234960e11b815260040160405180910390fd5b50600b546000908152600160205260409020546001600160a01b031690565b80516001600160a01b031661107557604051639f34e01960e01b815260040160405180910390fd5b60208101516001600160a01b03166110a057604051639f34e01960e01b815260040160405180910390fd5b80516040516302abf57960e61b81526b13919515da1a5d195b1a5cdd60a21b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190611777565b6040838101519051633af32abf60e01b81526001600160a01b039182166004820152919250821690633af32abf90602401602060405180830381865afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d91906117a7565b6111aa57604051636191047560e11b815260040160405180910390fd5b306001600160a01b031682604001516001600160a01b0316636352211e84608001516040518263ffffffff1660e01b81526004016111ea91815260200190565b602060405180830381865afa158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190611777565b6001600160a01b03161461125257604051637bed417b60e01b815260040160405180910390fd5b8160c00151600003611277576040516398fccb2760e01b815260040160405180910390fd5b8160a0015160000361129c576040516398fccb2760e01b815260040160405180910390fd5b81516040516302abf57960e61b81526c21b7b73334b3a6b0b730b3b2b960991b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113189190611777565b9050806001600160a01b0316632dc5faee6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190611721565b8360a0015111156113a057604051633ae960d760e21b815260040160405180910390fd5b600080826001600160a01b0316631aba4c776040518163ffffffff1660e01b81526004016040805180830381865afa1580156113e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611404919061182d565b60e087015191935091506001600160401b03168281108061142457508181115b1561144257604051630471175760e11b815260040160405180910390fd5b505050505050565b60008115611388198390048411151761146257600080fd5b506127109102611388010490565b600a54600090611481908390611851565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156114c5576114c5611487565b604052919050565b6001600160a01b03811681146104ee57600080fd5b80356114ed816114cd565b919050565b80356001600160401b03811681146114ed57600080fd5b600061010080838503121561151d57600080fd5b604051908101906001600160401b038211818310171561153f5761153f611487565b8160405283359150611550826114cd565b81815261155f602085016114e2565b6020820152611570604085016114e2565b6040820152611581606085016114e2565b60608201526080840135608082015260a084013560a082015260c084013560c08201526115b060e085016114f2565b60e0820152949350505050565b6000602082840312156115cf57600080fd5b5035919050565b6000602082840312156115e857600080fd5b81356115f3816114cd565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561163257835183529284019291840191600101611616565b50909695505050505050565b6000602080838503121561165157600080fd5b82356001600160401b038082111561166857600080fd5b818501915085601f83011261167c57600080fd5b81358181111561168e5761168e611487565b8060051b915061169f84830161149d565b81815291830184019184810190888411156116b957600080fd5b938501935b838510156116d7578435825293850193908501906116be565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061171b57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561173357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b038181168382160190808211156117705761177061173a565b5092915050565b60006020828403121561178957600080fd5b81516115f3816114cd565b818103818111156114815761148161173a565b6000602082840312156117b957600080fd5b815180151581146115f357600080fd5b808201808211156114815761148161173a565b6000600182016117ee576117ee61173a565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008261182857634e487b7160e01b600052601260045260246000fd5b500690565b6000806040838503121561184057600080fd5b505080516020909101519092909150565b80820281158282048414176114815761148161173a56fea264697066735822122021e29060943be67fd6bd248a97cf4306ff9d6b16cd6be0be877b488478b216f864736f6c63430008110033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(overrides || {}) as Promise<Raffle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
