/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Raffle, RaffleInterface } from "../../../src/raffle/Raffle";

const _abi = [
  {
    inputs: [],
    name: "CANT_BE_ZERO",
    type: "error",
  },
  {
    inputs: [],
    name: "MAX_TICKET_SUPPLY_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "MSG_SENDER_NOT_WINNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ADDRESS_0",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_CREATOR",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ENOUGH_BALANCE",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_NFT_OWNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_RANDOM_PROVIDER_CONTRACT",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_CLOSE",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_STILL_OPEN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_ALREADY_DRAWN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_DRAWN_NOT_REQUESTED",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_NOT_DRAWN",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountReceived",
        type: "uint256",
      },
    ],
    name: "CreatorClaimTicketSalesAmount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ticketNumbers",
        type: "uint256[]",
      },
    ],
    name: "TicketPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "WinnerClaimedPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "raffleContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "winningTicket",
        type: "uint256",
      },
    ],
    name: "WinningTicketDrawned",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimTicketSalesAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "creator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drawnTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "randomNumbers",
        type: "uint256[]",
      },
    ],
    name: "drawnTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endTicketSales",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IImplementationManager",
            name: "implementationManager",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "purchaseCurrency",
            type: "address",
          },
          {
            internalType: "contract IERC721",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTicketSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ticketPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "ticketSaleDuration",
            type: "uint64",
          },
        ],
        internalType: "struct RaffleDataTypes.InitRaffleParams",
        name: "_params",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftToWin",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "nftContractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purchaseCurrency",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nbOfTickets",
        type: "uint256",
      },
    ],
    name: "purchaseTickets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "raffleStatus",
    outputs: [
      {
        internalType: "enum RaffleDataTypes.RaffleStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "randomProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ticketPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningTicket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506113fd806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636a4a5b2d116100ad578063cb784b4d11610071578063cb784b4d1461024a578063ccfa213e1461025d578063cf6622ab14610277578063d5abeb0114610292578063ed7a4e0b1461029a57600080fd5b80636a4a5b2d146101f657806370a08231146102075780638f46500e14610227578063a12776001461022f578063c26eea541461024257600080fd5b80633b398ff8116100f45780633b398ff814610174578063413c5f72146101aa5780634d1d3031146101b25780636352211e146101c5578063636ed74c146101ee57600080fd5b806302d05d3f146101265780631209b1f61461015057806315d655c91461016257806318160ddd1461016c575b600080fd5b6003546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b600a545b604051908152602001610147565b61016a6102a2565b005b600954610154565b61018b6006546007546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610147565b61016a6103fe565b61016a6101c036600461109f565b6104f3565b6101336101d3366004611153565b6000908152600160205260409020546001600160a01b031690565b61016a6106af565b6004546001600160a01b0316610133565b61021a61021536600461116c565b61086c565b6040516101479190611190565b6101336108d8565b61016a61023d366004611153565b61095b565b610154610c17565b61016a6102583660046111d4565b610c99565b600c54600160401b900460ff16604051610147919061128f565b600c546040516001600160401b039091168152602001610147565b600854610154565b610133610dce565b600c546001600160401b03164210156102ce57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156102ee576102ee611279565b1461030c576040516316de234960e11b815260040160405180910390fd5b610314610dce565b6001600160a01b0316336001600160a01b0316146103455760405163b4e5b12160e01b815260040160405180910390fd5b600654600754604051632142170760e11b815230600482015233602482015260448101919091526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b50506006546007546040519081526001600160a01b03909116925033915030907f1fc6b0218aceb86978fcfee181f91a4a3f28d1eddff4e6df0c3dc99c79ace6d49060200160405180910390a4565b600c546001600160401b031642101561042a57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff16600281111561044a5761044a611279565b0361046857604051630a7f733d60e41b815260040160405180910390fd5b600c805460ff60401b1916600160401b1790556104836108d8565b604051633b82d3fb60e11b8152600160048201526001600160a01b039190911690637705a7f6906024016020604051808303816000875af11580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f091906112b7565b50565b600054610100900460ff16158080156105135750600054600160ff909116105b8061052d5750303b15801561052d575060005460ff166001145b6105945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156105b7576000805461ff0019166101001790555b6105c082610e68565b8151600580546001600160a01b039283166001600160a01b031991821617909155606084015160038054918416918316919091179055602084015160048054918416918316919091179055604084015160068054919093169116179055608082015160075560a082015160085560c0820151600a5560e082015161064490426112e6565b600c805467ffffffffffffffff19166001600160401b039290921691909117905580156106ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600c546001600160401b03164210156106db57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff1660028111156106fb576106fb611279565b14610719576040516316de234960e11b815260040160405180910390fd5b6003546001600160a01b0316331461074457604051632cff942760e01b815260040160405180910390fd5b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b691906112b7565b6004805460405163a9059cbb60e01b81523392810192909252602482018390529192506001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561080d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610831919061130d565b50604051818152339030907f2427926a2340a250197c73c9c1a12ca71ee0f1f53f8e08badda42770afc6ecf69060200160405180910390a350565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156108cc57602002820191906000526020600020905b8154815260200190600101908083116108b8575b50505050509050919050565b6005546040516302abf57960e61b81526d2930b73237b6a83937bb34b232b960911b60048201526000916001600160a01b03169063aafd5e4090602401602060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610956919061132f565b905090565b600c546001600160401b031642106109865760405163377d0b8560e11b815260040160405180910390fd5b806000036109a7576040516398fccb2760e01b815260040160405180910390fd5b600854816109b460095490565b6109be919061134c565b11156109dd576040516384bfcb9560e01b815260040160405180910390fd5b600480546040516370a0823160e01b815233928101929092526001600160a01b0316906370a0823190602401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a91906112b7565b610a5382611006565b1115610a725760405163119563e560e31b815260040160405180910390fd5b6004546001600160a01b03166323b872dd3330610a8e85611006565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b06919061130d565b503360009081526002602052604081206009549091836001600160401b03811115610b3357610b3361101d565b604051908082528060200260200182016040528015610b5c578160200160208202803683370190505b50905060005b84811015610bcf57610b738361135f565b925082828281518110610b8857610b88611378565b6020908102919091018101919091528454600181810187556000878152838120909201869055858252918290526040902080546001600160a01b0319163317905501610b62565b506009829055604051339030907f3298f998adc3ec4bdcc9bb12f2a924f1d28c61596124855d7d6d4d09e231847a90610c09908590611190565b60405180910390a350505050565b6000610c2b600c546001600160401b031690565b6001600160401b0316421015610c5457604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610c7457610c74611279565b14610c92576040516316de234960e11b815260040160405180910390fd5b50600b5490565b33610ca26108d8565b6001600160a01b031614610cc95760405163170cd40b60e31b815260040160405180910390fd5b6001600c54600160401b900460ff166002811115610ce957610ce9611279565b14610d07576040516345a4ca3b60e11b815260040160405180910390fd5b80600081518110610d1a57610d1a611378565b60200260200101516000148015610d3057508051155b15610d4357600c805460ff60401b191690555b60036006015481600081518110610d5c57610d5c611378565b6020026020010151610d6e919061138e565b610d7990600161134c565b600b819055600c805460ff60401b191668020000000000000000179055604080519182525130917fbd2ef7d8e723142e22eed26d859400cda0ac602edacddc8b13f96c921011a9ac919081900360200190a250565b6000610de2600c546001600160401b031690565b6001600160401b0316421015610e0b57604051630c2695bf60e11b815260040160405180910390fd5b6002600c54600160401b900460ff166002811115610e2b57610e2b611279565b14610e49576040516316de234960e11b815260040160405180910390fd5b50600b546000908152600160205260409020546001600160a01b031690565b80516001600160a01b0316610e9057604051639f34e01960e01b815260040160405180910390fd5b60208101516001600160a01b0316610ebb57604051639f34e01960e01b815260040160405180910390fd5b306001600160a01b031681604001516001600160a01b0316636352211e83608001516040518263ffffffff1660e01b8152600401610efb91815260200190565b602060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c919061132f565b6001600160a01b031614610f6357604051637bed417b60e01b815260040160405180910390fd5b60608101516001600160a01b0316610f8e57604051639f34e01960e01b815260040160405180910390fd5b8060c00151600003610fb3576040516398fccb2760e01b815260040160405180910390fd5b8060a00151600003610fd8576040516398fccb2760e01b815260040160405180910390fd5b8060e001516001600160401b03166000036104f0576040516398fccb2760e01b815260040160405180910390fd5b600a546000906110179083906113b0565b92915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561105b5761105b61101d565b604052919050565b6001600160a01b03811681146104f057600080fd5b803561108381611063565b919050565b80356001600160401b038116811461108357600080fd5b60006101008083850312156110b357600080fd5b604051908101906001600160401b03821181831017156110d5576110d561101d565b81604052833591506110e682611063565b8181526110f560208501611078565b602082015261110660408501611078565b604082015261111760608501611078565b60608201526080840135608082015260a084013560a082015260c084013560c082015261114660e08501611088565b60e0820152949350505050565b60006020828403121561116557600080fd5b5035919050565b60006020828403121561117e57600080fd5b813561118981611063565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156111c8578351835292840192918401916001016111ac565b50909695505050505050565b600060208083850312156111e757600080fd5b82356001600160401b03808211156111fe57600080fd5b818501915085601f83011261121257600080fd5b8135818111156112245761122461101d565b8060051b9150611235848301611033565b818152918301840191848101908884111561124f57600080fd5b938501935b8385101561126d57843582529385019390850190611254565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106112b157634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156112c957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115611306576113066112d0565b5092915050565b60006020828403121561131f57600080fd5b8151801515811461118957600080fd5b60006020828403121561134157600080fd5b815161118981611063565b80820180821115611017576110176112d0565b600060018201611371576113716112d0565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000826113ab57634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417611017576110176112d056fea26469706673582212209a841ee6824654e8df3cf07d9507d6a2fdc386bc4e4496850ba1b3264e0440d564736f6c63430008110033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(overrides || {}) as Promise<Raffle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
