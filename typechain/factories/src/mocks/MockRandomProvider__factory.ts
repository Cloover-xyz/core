/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRandomProvider,
  MockRandomProviderInterface,
} from "../../../src/mocks/MockRandomProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IImplementationManager",
        name: "_implementationManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "callerToRequestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "generateRandomNumbers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementationManager",
    outputs: [
      {
        internalType: "contract IImplementationManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestIdToCaller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestIdToNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "requestRandomNumberReturnZero",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomNumbers",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161067f38038061067f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6105ec806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638be57c5b1161005b5780638be57c5b146100e8578063a45698fb146100fb578063b6c5a1501461011b578063fedb64651461014457600080fd5b80632bafa11b146100825780636c68ae17146100b25780637705a7f6146100c7575b600080fd5b600054610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c56100c036600461048f565b610164565b005b6100da6100d53660046104a8565b610334565b6040519081526020016100a9565b6100c56100f636600461048f565b6103bb565b6100da61010936600461048f565b60036020526000908152604090205481565b61009561012936600461048f565b6002602052600090815260409020546001600160a01b031681565b6100da6101523660046104d5565b60016020526000908152604090205481565b600081815260036020526040812054908167ffffffffffffffff81111561018d5761018d6104fe565b6040519080825280602002602001820160405280156101b6578160200160208202803683370190505b50905060005b828110156102bc5780600003610226576101d760014361052a565b604080519140602083015233908201526060016040516020818303038152906040528051906020012060001c82828151811061021557610215610543565b6020026020010181815250506102aa565b8161023260018361052a565b8151811061024257610242610543565b6020026020010151600143610257919061052a565b40604051602001610272929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c82828151811061029d5761029d610543565b6020026020010181815250505b806102b481610559565b9150506101bc565b506000838152600260205260409081902054905163cb784b4d60e01b81526001600160a01b0390911690819063cb784b4d906102fc908590600401610572565b600060405180830381600087803b15801561031657600080fd5b505af115801561032a573d6000803e3d6000fd5b5050505050505050565b600061034160014361052a565b60045460408051924060208401523390830152606082015260800160408051601f198184030181529181528151602092830120336000818152600185528381208390558281526002855283812080546001600160a01b0319169092179091556003909352912063ffffffff90931690925550600481905590565b60008181526002602090815260408083205460039092528220546001600160a01b03909116918167ffffffffffffffff8111156103fa576103fa6104fe565b604051908082528060200260200182016040528015610423578160200160208202803683370190505b50905060005b8281101561046257600082828151811061044557610445610543565b60209081029190910101528061045a81610559565b915050610429565b5060405163cb784b4d60e01b81526001600160a01b0384169063cb784b4d906102fc908490600401610572565b6000602082840312156104a157600080fd5b5035919050565b6000602082840312156104ba57600080fd5b813563ffffffff811681146104ce57600080fd5b9392505050565b6000602082840312156104e757600080fd5b81356001600160a01b03811681146104ce57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561053d5761053d610514565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161056b5761056b610514565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156105aa5783518352928401929184019160010161058e565b5090969550505050505056fea264697066735822122095b67905db197008e7d0dec1e8eab8e8451962d4cbfe64e25f7f3142cba3101364736f6c63430008110033";

type MockRandomProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRandomProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRandomProvider__factory extends ContractFactory {
  constructor(...args: MockRandomProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _implementationManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRandomProvider> {
    return super.deploy(
      _implementationManager,
      overrides || {}
    ) as Promise<MockRandomProvider>;
  }
  override getDeployTransaction(
    _implementationManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_implementationManager, overrides || {});
  }
  override attach(address: string): MockRandomProvider {
    return super.attach(address) as MockRandomProvider;
  }
  override connect(signer: Signer): MockRandomProvider__factory {
    return super.connect(signer) as MockRandomProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRandomProviderInterface {
    return new utils.Interface(_abi) as MockRandomProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRandomProvider {
    return new Contract(address, _abi, signerOrProvider) as MockRandomProvider;
  }
}
