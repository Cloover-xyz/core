/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRandomProvider,
  MockRandomProviderInterface,
} from "../../../src/mocks/MockRandomProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRaffle",
        name: "_raffle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "requestRandomNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomNumberReturnZero",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161020d38038061020d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61017a806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063075f22e31461003b5780638678a7b214610045575b600080fd5b61004361004d565b005b6100436100ad565b600080546040516321d027cf60e21b815260048101929092526001600160a01b0316906387409f3c90602401600060405180830381600087803b15801561009357600080fd5b505af11580156100a7573d6000803e3d6000fd5b50505050565b60006100ba60014361011d565b6000546040516321d027cf60e21b815291406004830181905292506001600160a01b0316906387409f3c90602401600060405180830381600087803b15801561010257600080fd5b505af1158015610116573d6000803e3d6000fd5b5050505050565b8181038181111561013e57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220cfc57bb8d652d92a6fd87cd75a62e1bc4befa18665ee47d78c5a9a459482444e64736f6c63430008110033";

type MockRandomProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRandomProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRandomProvider__factory extends ContractFactory {
  constructor(...args: MockRandomProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _raffle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRandomProvider> {
    return super.deploy(
      _raffle,
      overrides || {}
    ) as Promise<MockRandomProvider>;
  }
  override getDeployTransaction(
    _raffle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_raffle, overrides || {});
  }
  override attach(address: string): MockRandomProvider {
    return super.attach(address) as MockRandomProvider;
  }
  override connect(signer: Signer): MockRandomProvider__factory {
    return super.connect(signer) as MockRandomProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRandomProviderInterface {
    return new utils.Interface(_abi) as MockRandomProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRandomProvider {
    return new Contract(address, _abi, signerOrProvider) as MockRandomProvider;
  }
}
