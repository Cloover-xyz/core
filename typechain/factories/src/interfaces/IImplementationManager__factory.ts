/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IImplementationManager,
  IImplementationManagerInterface,
} from "../../../src/interfaces/IImplementationManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceName",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "implementationAddress",
        type: "address",
      },
    ],
    name: "changeImplementationAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceName",
        type: "bytes32",
      },
    ],
    name: "getImplementationAddress",
    outputs: [
      {
        internalType: "address",
        name: "implementationAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IImplementationManager__factory {
  static readonly abi = _abi;
  static createInterface(): IImplementationManagerInterface {
    return new utils.Interface(_abi) as IImplementationManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IImplementationManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IImplementationManager;
  }
}
