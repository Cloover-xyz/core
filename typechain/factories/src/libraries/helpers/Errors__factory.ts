/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../../src/libraries/helpers/Errors";

const _abi = [
  {
    inputs: [],
    name: "ABOVE_MAX_DURATION",
    type: "error",
  },
  {
    inputs: [],
    name: "ARRAYS_LENGTH_NOT_EQUAL",
    type: "error",
  },
  {
    inputs: [],
    name: "BELLOW_MIN_DURATION",
    type: "error",
  },
  {
    inputs: [],
    name: "BE_ADDRESS_0",
    type: "error",
  },
  {
    inputs: [],
    name: "CANT_BE_ZERO",
    type: "error",
  },
  {
    inputs: [],
    name: "COLLECTION_ALREADY_WHITELISTED",
    type: "error",
  },
  {
    inputs: [],
    name: "COLLECTION_NOT_WHITELISTED",
    type: "error",
  },
  {
    inputs: [],
    name: "EXCEED_MAX_PERCENTAGE",
    type: "error",
  },
  {
    inputs: [],
    name: "IMPLEMENTATION_NOT_FOUND",
    type: "error",
  },
  {
    inputs: [],
    name: "MAX_TICKET_SUPPLY_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "MSG_SENDER_NOT_WINNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ADDRESS_0",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_CREATOR",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_ENOUGH_BALANCE",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_MAINTAINER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_NFT_OWNER",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_RAFFLE_CONTRACT",
    type: "error",
  },
  {
    inputs: [],
    name: "NOT_RANDOM_PROVIDER_CONTRACT",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_CLOSE",
    type: "error",
  },
  {
    inputs: [],
    name: "RAFFLE_STILL_OPEN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_ALREADY_DRAWN",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_DRAWN_NOT_REQUESTED",
    type: "error",
  },
  {
    inputs: [],
    name: "TICKET_NOT_DRAWN",
    type: "error",
  },
  {
    inputs: [],
    name: "WRONG_DURATION_LIMITS",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046f698afbb9bdd6fb9f70ef83d4b0c91502bfd8b6c649ebdb34de0513cc48aed64736f6c63430008110033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
