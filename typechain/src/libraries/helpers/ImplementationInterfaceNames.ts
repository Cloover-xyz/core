/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ImplementationInterfaceNamesInterface extends utils.Interface {
  functions: {
    "AccessController()": FunctionFragment;
    "ConfigManager()": FunctionFragment;
    "NFTWhitelist()": FunctionFragment;
    "RaffleFactory()": FunctionFragment;
    "RandomProvider()": FunctionFragment;
    "TokenWhitelist()": FunctionFragment;
    "Treasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AccessController"
      | "ConfigManager"
      | "NFTWhitelist"
      | "RaffleFactory"
      | "RandomProvider"
      | "TokenWhitelist"
      | "Treasury"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ConfigManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NFTWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RaffleFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RandomProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TokenWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ConfigManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFTWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RaffleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RandomProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Treasury", data: BytesLike): Result;

  events: {};
}

export interface ImplementationInterfaceNames extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImplementationInterfaceNamesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AccessController(overrides?: CallOverrides): Promise<[string]>;

    ConfigManager(overrides?: CallOverrides): Promise<[string]>;

    NFTWhitelist(overrides?: CallOverrides): Promise<[string]>;

    RaffleFactory(overrides?: CallOverrides): Promise<[string]>;

    RandomProvider(overrides?: CallOverrides): Promise<[string]>;

    TokenWhitelist(overrides?: CallOverrides): Promise<[string]>;

    Treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  AccessController(overrides?: CallOverrides): Promise<string>;

  ConfigManager(overrides?: CallOverrides): Promise<string>;

  NFTWhitelist(overrides?: CallOverrides): Promise<string>;

  RaffleFactory(overrides?: CallOverrides): Promise<string>;

  RandomProvider(overrides?: CallOverrides): Promise<string>;

  TokenWhitelist(overrides?: CallOverrides): Promise<string>;

  Treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AccessController(overrides?: CallOverrides): Promise<string>;

    ConfigManager(overrides?: CallOverrides): Promise<string>;

    NFTWhitelist(overrides?: CallOverrides): Promise<string>;

    RaffleFactory(overrides?: CallOverrides): Promise<string>;

    RandomProvider(overrides?: CallOverrides): Promise<string>;

    TokenWhitelist(overrides?: CallOverrides): Promise<string>;

    Treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    AccessController(overrides?: CallOverrides): Promise<BigNumber>;

    ConfigManager(overrides?: CallOverrides): Promise<BigNumber>;

    NFTWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    RaffleFactory(overrides?: CallOverrides): Promise<BigNumber>;

    RandomProvider(overrides?: CallOverrides): Promise<BigNumber>;

    TokenWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    Treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AccessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ConfigManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFTWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RaffleFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RandomProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokenWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
