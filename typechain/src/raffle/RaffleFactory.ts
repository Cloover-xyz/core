/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IClooverRaffleFactory {
  export type ParamsStruct = {
    purchaseCurrency: PromiseOrValue<string>;
    nftContract: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    maxTicketSupply: PromiseOrValue<BigNumberish>;
    ticketPrice: PromiseOrValue<BigNumberish>;
    ticketSaleDuration: PromiseOrValue<BigNumberish>;
  };

  export type ParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    purchaseCurrency: string;
    nftContract: string;
    nftId: BigNumber;
    maxTicketSupply: BigNumber;
    ticketPrice: BigNumber;
    ticketSaleDuration: BigNumber;
  };
}

export interface ClooverRaffleFactoryInterface extends utils.Interface {
  functions: {
    "batchClooverRaffledraw(address[])": FunctionFragment;
    "createNewClooverRaffle((address,address,uint256,uint256,uint256,uint64))": FunctionFragment;
    "isRegisteredClooverRaffle(address)": FunctionFragment;
    "requestIdToContracts(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchClooverRaffledraw"
      | "createNewClooverRaffle"
      | "isRegisteredClooverRaffle"
      | "requestIdToContracts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchClooverRaffledraw",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewClooverRaffle",
    values: [IClooverRaffleFactory.ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredClooverRaffle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToContracts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchClooverRaffledraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewClooverRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredClooverRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToContracts",
    data: BytesLike
  ): Result;

  events: {
    "NewClooverRaffle(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewClooverRaffle"): EventFragment;
}

export interface NewClooverRaffleEventObject {
  raffleContract: string;
  globalData: IClooverRaffleFactory.ParamsStructOutput;
}
export type NewClooverRaffleEvent = TypedEvent<
  [string, IClooverRaffleFactory.ParamsStructOutput],
  NewClooverRaffleEventObject
>;

export type NewClooverRaffleEventFilter =
  TypedEventFilter<NewClooverRaffleEvent>;

export interface ClooverRaffleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClooverRaffleFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchClooverRaffledraw(
      _raffleContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewClooverRaffle(
      params: IClooverRaffleFactory.ParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRegisteredClooverRaffle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requestIdToContracts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  batchClooverRaffledraw(
    _raffleContracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewClooverRaffle(
    params: IClooverRaffleFactory.ParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRegisteredClooverRaffle(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestIdToContracts(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    batchClooverRaffledraw(
      _raffleContracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createNewClooverRaffle(
      params: IClooverRaffleFactory.ParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    isRegisteredClooverRaffle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestIdToContracts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewClooverRaffle(address,tuple)"(
      raffleContract?: PromiseOrValue<string> | null,
      globalData?: null
    ): NewClooverRaffleEventFilter;
    NewClooverRaffle(
      raffleContract?: PromiseOrValue<string> | null,
      globalData?: null
    ): NewClooverRaffleEventFilter;
  };

  estimateGas: {
    batchClooverRaffledraw(
      _raffleContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewClooverRaffle(
      params: IClooverRaffleFactory.ParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRegisteredClooverRaffle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestIdToContracts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchClooverRaffledraw(
      _raffleContracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewClooverRaffle(
      params: IClooverRaffleFactory.ParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredClooverRaffle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestIdToContracts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
