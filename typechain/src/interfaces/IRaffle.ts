/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace RaffleDataTypes {
  export type InitRaffleParamsStruct = {
    implementationManager: PromiseOrValue<string>;
    purchaseCurrency: PromiseOrValue<string>;
    nftContract: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    maxTicketSupply: PromiseOrValue<BigNumberish>;
    ticketPrice: PromiseOrValue<BigNumberish>;
    ticketSaleDuration: PromiseOrValue<BigNumberish>;
  };

  export type InitRaffleParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    implementationManager: string;
    purchaseCurrency: string;
    nftContract: string;
    creator: string;
    nftId: BigNumber;
    maxTicketSupply: BigNumber;
    ticketPrice: BigNumber;
    ticketSaleDuration: BigNumber;
  };
}

export interface IRaffleInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "claimPrice()": FunctionFragment;
    "claimTicketSalesAmount()": FunctionFragment;
    "creator()": FunctionFragment;
    "drawnTickets()": FunctionFragment;
    "drawnTickets(uint256[])": FunctionFragment;
    "endTicketSales()": FunctionFragment;
    "initialize((address,address,address,address,uint256,uint256,uint256,uint64))": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "nftToWin()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "purchaseCurrency()": FunctionFragment;
    "purchaseTickets(uint256)": FunctionFragment;
    "raffleStatus()": FunctionFragment;
    "randomProvider()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "winnerAddress()": FunctionFragment;
    "winningTicket()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "claimPrice"
      | "claimTicketSalesAmount"
      | "creator"
      | "drawnTickets()"
      | "drawnTickets(uint256[])"
      | "endTicketSales"
      | "initialize"
      | "maxSupply"
      | "nftToWin"
      | "ownerOf"
      | "purchaseCurrency"
      | "purchaseTickets"
      | "raffleStatus"
      | "randomProvider"
      | "ticketPrice"
      | "totalSupply"
      | "winnerAddress"
      | "winningTicket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTicketSalesAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drawnTickets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawnTickets(uint256[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "endTicketSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [RaffleDataTypes.InitRaffleParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftToWin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTickets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningTicket",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTicketSalesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawnTickets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawnTickets(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTicketSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftToWin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningTicket",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRaffle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRaffleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    claimPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTicketSalesAmount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    "drawnTickets()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "drawnTickets(uint256[])"(
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTicketSales(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _params: RaffleDataTypes.InitRaffleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftToWin(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { nftContractAddress: string; nftId: BigNumber }
    >;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    purchaseCurrency(overrides?: CallOverrides): Promise<[string]>;

    purchaseTickets(
      nbOfTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    raffleStatus(overrides?: CallOverrides): Promise<[number]>;

    randomProvider(overrides?: CallOverrides): Promise<[string]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    winnerAddress(overrides?: CallOverrides): Promise<[string]>;

    winningTicket(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  claimPrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTicketSalesAmount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  "drawnTickets()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "drawnTickets(uint256[])"(
    randomNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTicketSales(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _params: RaffleDataTypes.InitRaffleParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  nftToWin(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { nftContractAddress: string; nftId: BigNumber }
  >;

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  purchaseCurrency(overrides?: CallOverrides): Promise<string>;

  purchaseTickets(
    nbOfTickets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  raffleStatus(overrides?: CallOverrides): Promise<number>;

  randomProvider(overrides?: CallOverrides): Promise<string>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  winnerAddress(overrides?: CallOverrides): Promise<string>;

  winningTicket(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    claimPrice(overrides?: CallOverrides): Promise<void>;

    claimTicketSalesAmount(overrides?: CallOverrides): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    "drawnTickets()"(overrides?: CallOverrides): Promise<void>;

    "drawnTickets(uint256[])"(
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    endTicketSales(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _params: RaffleDataTypes.InitRaffleParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    nftToWin(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { nftContractAddress: string; nftId: BigNumber }
    >;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    purchaseCurrency(overrides?: CallOverrides): Promise<string>;

    purchaseTickets(
      nbOfTickets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    raffleStatus(overrides?: CallOverrides): Promise<number>;

    randomProvider(overrides?: CallOverrides): Promise<string>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    winnerAddress(overrides?: CallOverrides): Promise<string>;

    winningTicket(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTicketSalesAmount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    "drawnTickets()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "drawnTickets(uint256[])"(
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTicketSales(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _params: RaffleDataTypes.InitRaffleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    nftToWin(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTickets(
      nbOfTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    raffleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    randomProvider(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    winnerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    winningTicket(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTicketSalesAmount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "drawnTickets()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "drawnTickets(uint256[])"(
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTicketSales(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _params: RaffleDataTypes.InitRaffleParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftToWin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseTickets(
      nbOfTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    raffleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winningTicket(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
