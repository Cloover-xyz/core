/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NFTCollectionWhitelistInterface extends utils.Interface {
  functions: {
    "addToWhitelist(address,address)": FunctionFragment;
    "getCollectionCreator(address)": FunctionFragment;
    "getWhitelist()": FunctionFragment;
    "implementationManager()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToWhitelist"
      | "getCollectionCreator"
      | "getWhitelist"
      | "implementationManager"
      | "isWhitelisted"
      | "removeFromWhitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionCreator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "AddedToWhitelist(address,address)": EventFragment;
    "RemovedFromWhitelist(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromWhitelist"): EventFragment;
}

export interface AddedToWhitelistEventObject {
  addedNftCollection: string;
  creator: string;
}
export type AddedToWhitelistEvent = TypedEvent<
  [string, string],
  AddedToWhitelistEventObject
>;

export type AddedToWhitelistEventFilter =
  TypedEventFilter<AddedToWhitelistEvent>;

export interface RemovedFromWhitelistEventObject {
  removedNftCollection: string;
}
export type RemovedFromWhitelistEvent = TypedEvent<
  [string],
  RemovedFromWhitelistEventObject
>;

export type RemovedFromWhitelistEventFilter =
  TypedEventFilter<RemovedFromWhitelistEvent>;

export interface NFTCollectionWhitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTCollectionWhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToWhitelist(
      newNftCollection: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCollectionCreator(
      nftCollection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { creator: string }>;

    getWhitelist(overrides?: CallOverrides): Promise<[string[]]>;

    implementationManager(overrides?: CallOverrides): Promise<[string]>;

    isWhitelisted(
      nftCollectionToCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFromWhitelist(
      nftCollectionToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToWhitelist(
    newNftCollection: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCollectionCreator(
    nftCollection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWhitelist(overrides?: CallOverrides): Promise<string[]>;

  implementationManager(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(
    nftCollectionToCheck: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFromWhitelist(
    nftCollectionToRemove: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToWhitelist(
      newNftCollection: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollectionCreator(
      nftCollection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWhitelist(overrides?: CallOverrides): Promise<string[]>;

    implementationManager(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(
      nftCollectionToCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromWhitelist(
      nftCollectionToRemove: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToWhitelist(address,address)"(
      addedNftCollection?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): AddedToWhitelistEventFilter;
    AddedToWhitelist(
      addedNftCollection?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): AddedToWhitelistEventFilter;

    "RemovedFromWhitelist(address)"(
      removedNftCollection?: PromiseOrValue<string> | null
    ): RemovedFromWhitelistEventFilter;
    RemovedFromWhitelist(
      removedNftCollection?: PromiseOrValue<string> | null
    ): RemovedFromWhitelistEventFilter;
  };

  estimateGas: {
    addToWhitelist(
      newNftCollection: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCollectionCreator(
      nftCollection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    implementationManager(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      nftCollectionToCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromWhitelist(
      nftCollectionToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToWhitelist(
      newNftCollection: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCollectionCreator(
      nftCollection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      nftCollectionToCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      nftCollectionToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
