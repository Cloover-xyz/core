/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace RandomProvider {
  export type ChainlinkVRFDataStruct = {
    vrfCoordinator: PromiseOrValue<string>;
    keyHash: PromiseOrValue<BytesLike>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    requestConfirmations: PromiseOrValue<BigNumberish>;
    subscriptionId: PromiseOrValue<BigNumberish>;
  };

  export type ChainlinkVRFDataStructOutput = [
    string,
    string,
    number,
    number,
    BigNumber
  ] & {
    vrfCoordinator: string;
    keyHash: string;
    callbackGasLimit: number;
    requestConfirmations: number;
    subscriptionId: BigNumber;
  };
}

export interface RandomProviderInterface extends utils.Interface {
  functions: {
    "COORDINATOR()": FunctionFragment;
    "chainlinkVRFData()": FunctionFragment;
    "implementationManager()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "requestIdToAddress(uint256)": FunctionFragment;
    "requestRandomNumber()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COORDINATOR"
      | "chainlinkVRFData"
      | "implementationManager"
      | "rawFulfillRandomWords"
      | "requestIdToAddress"
      | "requestRandomNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COORDINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkVRFData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COORDINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkVRFData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RandomProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandomProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COORDINATOR(overrides?: CallOverrides): Promise<[string]>;

    chainlinkVRFData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, BigNumber] & {
        vrfCoordinator: string;
        keyHash: string;
        callbackGasLimit: number;
        requestConfirmations: number;
        subscriptionId: BigNumber;
      }
    >;

    implementationManager(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestIdToAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COORDINATOR(overrides?: CallOverrides): Promise<string>;

  chainlinkVRFData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, BigNumber] & {
      vrfCoordinator: string;
      keyHash: string;
      callbackGasLimit: number;
      requestConfirmations: number;
      subscriptionId: BigNumber;
    }
  >;

  implementationManager(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestIdToAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  requestRandomNumber(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COORDINATOR(overrides?: CallOverrides): Promise<string>;

    chainlinkVRFData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, BigNumber] & {
        vrfCoordinator: string;
        keyHash: string;
        callbackGasLimit: number;
        requestConfirmations: number;
        subscriptionId: BigNumber;
      }
    >;

    implementationManager(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestIdToAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    requestRandomNumber(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    COORDINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkVRFData(overrides?: CallOverrides): Promise<BigNumber>;

    implementationManager(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestIdToAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COORDINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkVRFData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestIdToAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
