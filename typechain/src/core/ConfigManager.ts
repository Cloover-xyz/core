/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ConfiguratorInputTypes {
  export type InitConfigManagerInputStruct = {
    protocolFeesPercentage: PromiseOrValue<BigNumberish>;
    maxTicketSupplyAllowed: PromiseOrValue<BigNumberish>;
    minTicketSalesDuration: PromiseOrValue<BigNumberish>;
    maxTicketSalesDuration: PromiseOrValue<BigNumberish>;
  };

  export type InitConfigManagerInputStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    protocolFeesPercentage: BigNumber;
    maxTicketSupplyAllowed: BigNumber;
    minTicketSalesDuration: BigNumber;
    maxTicketSalesDuration: BigNumber;
  };
}

export interface ConfigManagerInterface extends utils.Interface {
  functions: {
    "_implementationManager()": FunctionFragment;
    "implementationManager()": FunctionFragment;
    "maxTicketSalesDuration()": FunctionFragment;
    "maxTicketSupplyAllowed()": FunctionFragment;
    "minTicketSalesDuration()": FunctionFragment;
    "procolFeesPercentage()": FunctionFragment;
    "setMaxTicketSalesDuration(uint256)": FunctionFragment;
    "setMaxTicketSupplyAllowed(uint256)": FunctionFragment;
    "setMinTicketSalesDuration(uint256)": FunctionFragment;
    "setProcolFeesPercentage(uint256)": FunctionFragment;
    "ticketSalesDurationLimits()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_implementationManager"
      | "implementationManager"
      | "maxTicketSalesDuration"
      | "maxTicketSupplyAllowed"
      | "minTicketSalesDuration"
      | "procolFeesPercentage"
      | "setMaxTicketSalesDuration"
      | "setMaxTicketSupplyAllowed"
      | "setMinTicketSalesDuration"
      | "setProcolFeesPercentage"
      | "ticketSalesDurationLimits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_implementationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTicketSalesDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTicketSupplyAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTicketSalesDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "procolFeesPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTicketSalesDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTicketSupplyAllowed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTicketSalesDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProcolFeesPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketSalesDurationLimits",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_implementationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTicketSalesDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTicketSupplyAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTicketSalesDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "procolFeesPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTicketSalesDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTicketSupplyAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTicketSalesDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcolFeesPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketSalesDurationLimits",
    data: BytesLike
  ): Result;

  events: {
    "MaxTicketSalesDurationUpdated(uint256)": EventFragment;
    "MaxTicketSupplyAllowedUpdated(uint256)": EventFragment;
    "MinTicketSalesDurationUpdated(uint256)": EventFragment;
    "ProtocolFeesPercentageUpdated(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "MaxTicketSalesDurationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxTicketSupplyAllowedUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinTicketSalesDurationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeesPercentageUpdated"
  ): EventFragment;
}

export interface MaxTicketSalesDurationUpdatedEventObject {
  newMaxTicketSalesDuration: BigNumber;
}
export type MaxTicketSalesDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxTicketSalesDurationUpdatedEventObject
>;

export type MaxTicketSalesDurationUpdatedEventFilter =
  TypedEventFilter<MaxTicketSalesDurationUpdatedEvent>;

export interface MaxTicketSupplyAllowedUpdatedEventObject {
  newMaxTicketSupplyAllowed: BigNumber;
}
export type MaxTicketSupplyAllowedUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxTicketSupplyAllowedUpdatedEventObject
>;

export type MaxTicketSupplyAllowedUpdatedEventFilter =
  TypedEventFilter<MaxTicketSupplyAllowedUpdatedEvent>;

export interface MinTicketSalesDurationUpdatedEventObject {
  newMinTicketSalesDuration: BigNumber;
}
export type MinTicketSalesDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  MinTicketSalesDurationUpdatedEventObject
>;

export type MinTicketSalesDurationUpdatedEventFilter =
  TypedEventFilter<MinTicketSalesDurationUpdatedEvent>;

export interface ProtocolFeesPercentageUpdatedEventObject {
  newFeePercentage: BigNumber;
}
export type ProtocolFeesPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  ProtocolFeesPercentageUpdatedEventObject
>;

export type ProtocolFeesPercentageUpdatedEventFilter =
  TypedEventFilter<ProtocolFeesPercentageUpdatedEvent>;

export interface ConfigManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _implementationManager(overrides?: CallOverrides): Promise<[string]>;

    implementationManager(overrides?: CallOverrides): Promise<[string]>;

    maxTicketSalesDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTicketSupplyAllowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTicketSalesDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    procolFeesPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxTicketSalesDuration(
      newMaxTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTicketSupplyAllowed(
      newMaxTicketSupplyAllowed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinTicketSalesDuration(
      newMinTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProcolFeesPercentage(
      newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketSalesDurationLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minDuration: BigNumber;
        maxDuration: BigNumber;
      }
    >;
  };

  _implementationManager(overrides?: CallOverrides): Promise<string>;

  implementationManager(overrides?: CallOverrides): Promise<string>;

  maxTicketSalesDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxTicketSupplyAllowed(overrides?: CallOverrides): Promise<BigNumber>;

  minTicketSalesDuration(overrides?: CallOverrides): Promise<BigNumber>;

  procolFeesPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxTicketSalesDuration(
    newMaxTicketSalesDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTicketSupplyAllowed(
    newMaxTicketSupplyAllowed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinTicketSalesDuration(
    newMinTicketSalesDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProcolFeesPercentage(
    newFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketSalesDurationLimits(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minDuration: BigNumber; maxDuration: BigNumber }
  >;

  callStatic: {
    _implementationManager(overrides?: CallOverrides): Promise<string>;

    implementationManager(overrides?: CallOverrides): Promise<string>;

    maxTicketSalesDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxTicketSupplyAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    minTicketSalesDuration(overrides?: CallOverrides): Promise<BigNumber>;

    procolFeesPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxTicketSalesDuration(
      newMaxTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTicketSupplyAllowed(
      newMaxTicketSupplyAllowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTicketSalesDuration(
      newMinTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProcolFeesPercentage(
      newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketSalesDurationLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minDuration: BigNumber;
        maxDuration: BigNumber;
      }
    >;
  };

  filters: {
    "MaxTicketSalesDurationUpdated(uint256)"(
      newMaxTicketSalesDuration?: null
    ): MaxTicketSalesDurationUpdatedEventFilter;
    MaxTicketSalesDurationUpdated(
      newMaxTicketSalesDuration?: null
    ): MaxTicketSalesDurationUpdatedEventFilter;

    "MaxTicketSupplyAllowedUpdated(uint256)"(
      newMaxTicketSupplyAllowed?: null
    ): MaxTicketSupplyAllowedUpdatedEventFilter;
    MaxTicketSupplyAllowedUpdated(
      newMaxTicketSupplyAllowed?: null
    ): MaxTicketSupplyAllowedUpdatedEventFilter;

    "MinTicketSalesDurationUpdated(uint256)"(
      newMinTicketSalesDuration?: null
    ): MinTicketSalesDurationUpdatedEventFilter;
    MinTicketSalesDurationUpdated(
      newMinTicketSalesDuration?: null
    ): MinTicketSalesDurationUpdatedEventFilter;

    "ProtocolFeesPercentageUpdated(uint256)"(
      newFeePercentage?: null
    ): ProtocolFeesPercentageUpdatedEventFilter;
    ProtocolFeesPercentageUpdated(
      newFeePercentage?: null
    ): ProtocolFeesPercentageUpdatedEventFilter;
  };

  estimateGas: {
    _implementationManager(overrides?: CallOverrides): Promise<BigNumber>;

    implementationManager(overrides?: CallOverrides): Promise<BigNumber>;

    maxTicketSalesDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxTicketSupplyAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    minTicketSalesDuration(overrides?: CallOverrides): Promise<BigNumber>;

    procolFeesPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxTicketSalesDuration(
      newMaxTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTicketSupplyAllowed(
      newMaxTicketSupplyAllowed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinTicketSalesDuration(
      newMinTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProcolFeesPercentage(
      newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketSalesDurationLimits(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _implementationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTicketSalesDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTicketSupplyAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minTicketSalesDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    procolFeesPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxTicketSalesDuration(
      newMaxTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTicketSupplyAllowed(
      newMaxTicketSupplyAllowed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinTicketSalesDuration(
      newMinTicketSalesDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProcolFeesPercentage(
      newFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketSalesDurationLimits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
