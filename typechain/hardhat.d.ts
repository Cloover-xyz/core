/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "VRFCoordinatorV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFCoordinatorV2Interface__factory>;
    getContractFactory(
      name: "VRFConsumerBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBaseV2__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessController__factory>;
    getContractFactory(
      name: "ConfigManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigManager__factory>;
    getContractFactory(
      name: "ImplementationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementationManager__factory>;
    getContractFactory(
      name: "NFTCollectionWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTCollectionWhitelist__factory>;
    getContractFactory(
      name: "RandomProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomProvider__factory>;
    getContractFactory(
      name: "IAccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessController__factory>;
    getContractFactory(
      name: "IConfigManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfigManager__factory>;
    getContractFactory(
      name: "IImplementationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImplementationManager__factory>;
    getContractFactory(
      name: "INFTCollectionWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTCollectionWhitelist__factory>;
    getContractFactory(
      name: "IRaffle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRaffle__factory>;
    getContractFactory(
      name: "IRaffleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRaffleFactory__factory>;
    getContractFactory(
      name: "IRandomProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomProvider__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "ImplementationInterfaceNames",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementationInterfaceNames__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC721__factory>;
    getContractFactory(
      name: "MockRandomProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRandomProvider__factory>;
    getContractFactory(
      name: "Raffle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Raffle__factory>;
    getContractFactory(
      name: "RaffleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RaffleFactory__factory>;

    getContractAt(
      name: "VRFCoordinatorV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFCoordinatorV2Interface>;
    getContractAt(
      name: "VRFConsumerBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBaseV2>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AccessController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessController>;
    getContractAt(
      name: "ConfigManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigManager>;
    getContractAt(
      name: "ImplementationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementationManager>;
    getContractAt(
      name: "NFTCollectionWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTCollectionWhitelist>;
    getContractAt(
      name: "RandomProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomProvider>;
    getContractAt(
      name: "IAccessController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessController>;
    getContractAt(
      name: "IConfigManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfigManager>;
    getContractAt(
      name: "IImplementationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImplementationManager>;
    getContractAt(
      name: "INFTCollectionWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTCollectionWhitelist>;
    getContractAt(
      name: "IRaffle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRaffle>;
    getContractAt(
      name: "IRaffleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRaffleFactory>;
    getContractAt(
      name: "IRandomProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomProvider>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "ImplementationInterfaceNames",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementationInterfaceNames>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC721>;
    getContractAt(
      name: "MockRandomProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRandomProvider>;
    getContractAt(
      name: "Raffle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Raffle>;
    getContractAt(
      name: "RaffleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RaffleFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
